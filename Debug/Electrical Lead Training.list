
Electrical Lead Training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004d70  08004d70  00005d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e04  08004e04  0000619c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e04  08004e04  00005e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e0c  08004e0c  0000619c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08004e70  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08004f10  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000084c  2000019c  08004fb0  0000619c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009e8  08004fb0  000069e8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000619c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011a29  00000000  00000000  000061ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002541  00000000  00000000  00017bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d50  00000000  00000000  0001a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a36  00000000  00000000  0001ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000289f3  00000000  00000000  0001b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000105f6  00000000  00000000  000442b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9ab1  00000000  00000000  000548a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014e358  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003c5c  00000000  00000000  0014e39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  00151ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d58 	.word	0x08004d58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	08004d58 	.word	0x08004d58

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <PrintOutputBuffer.1>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	void PrintOutputBuffer(uint8_t *OutputBuffer){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	f8c7 c000 	str.w	ip, [r7]
		uint32_t StringLength;
		HAL_StatusTypeDef HALStatus;
		for(StringLength = 0; *(OutputBuffer+StringLength); StringLength++);
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e002      	b.n	8000624 <PrintOutputBuffer.1+0x18>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f6      	bne.n	800061e <PrintOutputBuffer.1+0x12>
		HALStatus = HAL_UART_Transmit(&huart2, OutputBuffer, StringLength, HAL_MAX_DELAY);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	b29a      	uxth	r2, r3
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <PrintOutputBuffer.1+0x4c>)
 800063c:	f002 fe24 	bl	8003288 <HAL_UART_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	72fb      	strb	r3, [r7, #11]
		if(HALStatus != HAL_OK){
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <PrintOutputBuffer.1+0x42>
			Error_Handler();
 800064a:	f000 fa41 	bl	8000ad0 <Error_Handler>
		}
	}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200002a0 	.word	0x200002a0

0800065c <main>:
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
int main(void)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fcaf 	bl	8000fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f85e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f97a 	bl	8000968 <MX_GPIO_Init>
  MX_ETH_Init();
 8000674:	f000 f8cc 	bl	8000810 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000678:	f000 f948 	bl	800090c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f916 	bl	80008ac <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf((char *) OutputBuffer,"Hello, World! %d\r\n",i++);
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <main+0x80>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	4915      	ldr	r1, [pc, #84]	@ (80006dc <main+0x80>)
 8000688:	600a      	str	r2, [r1, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	4914      	ldr	r1, [pc, #80]	@ (80006e0 <main+0x84>)
 800068e:	4815      	ldr	r0, [pc, #84]	@ (80006e4 <main+0x88>)
 8000690:	f003 fec2 	bl	8004418 <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	469c      	mov	ip, r3
 8000698:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <main+0x88>)
 800069a:	f7ff ffb7 	bl	800060c <PrintOutputBuffer.1>
	  sprintf((char *) OutputBuffer,"Press any key to continue...\r\n");
 800069e:	4912      	ldr	r1, [pc, #72]	@ (80006e8 <main+0x8c>)
 80006a0:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <main+0x88>)
 80006a2:	f003 feb9 	bl	8004418 <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	469c      	mov	ip, r3
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <main+0x88>)
 80006ac:	f7ff ffae 	bl	800060c <PrintOutputBuffer.1>
	  ReceiveCharacter = GetUserInput();
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	469c      	mov	ip, r3
 80006b4:	f000 f81e 	bl	80006f4 <GetUserInput.0>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <main+0x90>)
 80006be:	701a      	strb	r2, [r3, #0]
	  sprintf((char *) OutputBuffer,"You entered: %c\r\n",ReceiveCharacter);
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <main+0x90>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	490a      	ldr	r1, [pc, #40]	@ (80006f0 <main+0x94>)
 80006c8:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <main+0x88>)
 80006ca:	f003 fea5 	bl	8004418 <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	469c      	mov	ip, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <main+0x88>)
 80006d4:	f7ff ff9a 	bl	800060c <PrintOutputBuffer.1>
	  sprintf((char *) OutputBuffer,"Hello, World! %d\r\n",i++);
 80006d8:	bf00      	nop
 80006da:	e7d1      	b.n	8000680 <main+0x24>
 80006dc:	20000888 	.word	0x20000888
 80006e0:	08004d70 	.word	0x08004d70
 80006e4:	20000808 	.word	0x20000808
 80006e8:	08004d84 	.word	0x08004d84
 80006ec:	2000088c 	.word	0x2000088c
 80006f0:	08004da4 	.word	0x08004da4

080006f4 <GetUserInput.0>:
	uint8_t GetUserInput(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	f8c7 c004 	str.w	ip, [r7, #4]
		HALStatus = HAL_UART_Receive(&huart2, &ReturnValue, 1, HAL_MAX_DELAY);
 80006fe:	f107 010e 	add.w	r1, r7, #14
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	2201      	movs	r2, #1
 8000708:	4807      	ldr	r0, [pc, #28]	@ (8000728 <GetUserInput.0+0x34>)
 800070a:	f002 fe46 	bl	800339a <HAL_UART_Receive>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
		if(HALStatus != HAL_OK){
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <GetUserInput.0+0x28>
			Error_Handler();
 8000718:	f000 f9da 	bl	8000ad0 <Error_Handler>
		return ReturnValue;
 800071c:	7bbb      	ldrb	r3, [r7, #14]
	}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200002a0 	.word	0x200002a0

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2234      	movs	r2, #52	@ 0x34
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fe8e 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f001 fbf0 	bl	8001f34 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <SystemClock_Config+0xdc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a2b      	ldr	r2, [pc, #172]	@ (8000808 <SystemClock_Config+0xdc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <SystemClock_Config+0xdc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076c:	4b27      	ldr	r3, [pc, #156]	@ (800080c <SystemClock_Config+0xe0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000774:	4a25      	ldr	r2, [pc, #148]	@ (800080c <SystemClock_Config+0xe0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	@ (800080c <SystemClock_Config+0xe0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800078c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000790:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007a0:	2360      	movs	r3, #96	@ 0x60
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fc1d 	bl	8001ff4 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c0:	f000 f986 	bl	8000ad0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c4:	f001 fbc6 	bl	8001f54 <HAL_PWREx_EnableOverDrive>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ce:	f000 f97f 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2103      	movs	r1, #3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 feae 	bl	8002550 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007fa:	f000 f969 	bl	8000ad0 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ETH_Init+0x84>)
 8000816:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <MX_ETH_Init+0x88>)
 8000818:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <MX_ETH_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_ETH_Init+0x8c>)
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_ETH_Init+0x8c>)
 8000828:	22e1      	movs	r2, #225	@ 0xe1
 800082a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_ETH_Init+0x8c>)
 800082e:	2200      	movs	r2, #0
 8000830:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_ETH_Init+0x8c>)
 8000834:	2200      	movs	r2, #0
 8000836:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_ETH_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_ETH_Init+0x84>)
 8000840:	4a16      	ldr	r2, [pc, #88]	@ (800089c <MX_ETH_Init+0x8c>)
 8000842:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_ETH_Init+0x84>)
 8000846:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800084a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_ETH_Init+0x84>)
 800084e:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <MX_ETH_Init+0x90>)
 8000850:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_ETH_Init+0x84>)
 8000854:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <MX_ETH_Init+0x94>)
 8000856:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_ETH_Init+0x84>)
 800085a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800085e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_ETH_Init+0x84>)
 8000862:	f000 fd19 	bl	8001298 <HAL_ETH_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f930 	bl	8000ad0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000870:	2238      	movs	r2, #56	@ 0x38
 8000872:	2100      	movs	r1, #0
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_ETH_Init+0x98>)
 8000876:	f003 fdf1 	bl	800445c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_ETH_Init+0x98>)
 800087c:	2221      	movs	r2, #33	@ 0x21
 800087e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_ETH_Init+0x98>)
 8000882:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000886:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_ETH_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001f0 	.word	0x200001f0
 8000898:	40028000 	.word	0x40028000
 800089c:	20000890 	.word	0x20000890
 80008a0:	200000fc 	.word	0x200000fc
 80008a4:	2000005c 	.word	0x2000005c
 80008a8:	200001b8 	.word	0x200001b8

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	@ (8000908 <MX_USART2_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008f0:	f002 fc7c 	bl	80031ec <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f8e9 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200002a0 	.word	0x200002a0
 8000908:	40004400 	.word	0x40004400

0800090c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2206      	movs	r2, #6
 800091c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2202      	movs	r2, #2
 8000922:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2201      	movs	r2, #1
 8000934:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2201      	movs	r2, #1
 8000946:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	f001 f9b5 	bl	8001cbe <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f8b9 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000328 	.word	0x20000328

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	@ 0x30
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b4f      	ldr	r3, [pc, #316]	@ (8000abc <MX_GPIO_Init+0x154>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a4e      	ldr	r2, [pc, #312]	@ (8000abc <MX_GPIO_Init+0x154>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b4c      	ldr	r3, [pc, #304]	@ (8000abc <MX_GPIO_Init+0x154>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	4b49      	ldr	r3, [pc, #292]	@ (8000abc <MX_GPIO_Init+0x154>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a48      	ldr	r2, [pc, #288]	@ (8000abc <MX_GPIO_Init+0x154>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b46      	ldr	r3, [pc, #280]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b43      	ldr	r3, [pc, #268]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a42      	ldr	r2, [pc, #264]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b40      	ldr	r3, [pc, #256]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b3d      	ldr	r3, [pc, #244]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a3c      	ldr	r2, [pc, #240]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b3a      	ldr	r3, [pc, #232]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a36      	ldr	r2, [pc, #216]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <MX_GPIO_Init+0x154>)
 80009fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_GPIO_Init+0x154>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a14:	482a      	ldr	r0, [pc, #168]	@ (8000ac0 <MX_GPIO_Init+0x158>)
 8000a16:	f001 f939 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	4829      	ldr	r0, [pc, #164]	@ (8000ac4 <MX_GPIO_Init+0x15c>)
 8000a20:	f001 f934 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4823      	ldr	r0, [pc, #140]	@ (8000ac8 <MX_GPIO_Init+0x160>)
 8000a3c:	f000 ff7a 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a40:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4819      	ldr	r0, [pc, #100]	@ (8000ac0 <MX_GPIO_Init+0x158>)
 8000a5a:	f000 ff6b 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a70:	2307      	movs	r3, #7
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4814      	ldr	r0, [pc, #80]	@ (8000acc <MX_GPIO_Init+0x164>)
 8000a7c:	f000 ff5a 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a80:	2340      	movs	r3, #64	@ 0x40
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <MX_GPIO_Init+0x15c>)
 8000a98:	f000 ff4c 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_GPIO_Init+0x15c>)
 8000ab0:	f000 ff40 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	@ 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a4e      	ldr	r2, [pc, #312]	@ (8000c7c <HAL_ETH_MspInit+0x158>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	f040 8096 	bne.w	8000c74 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b48:	4b4d      	ldr	r3, [pc, #308]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b54:	4b4a      	ldr	r3, [pc, #296]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	4b47      	ldr	r3, [pc, #284]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a46      	ldr	r2, [pc, #280]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6c:	4b44      	ldr	r3, [pc, #272]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	4b41      	ldr	r3, [pc, #260]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a40      	ldr	r2, [pc, #256]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b3e      	ldr	r3, [pc, #248]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b3b      	ldr	r3, [pc, #236]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b94:	4a3a      	ldr	r2, [pc, #232]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9c:	4b38      	ldr	r3, [pc, #224]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	4a34      	ldr	r2, [pc, #208]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb4:	4b32      	ldr	r3, [pc, #200]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <HAL_ETH_MspInit+0x15c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf0:	2332      	movs	r3, #50	@ 0x32
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481e      	ldr	r0, [pc, #120]	@ (8000c84 <HAL_ETH_MspInit+0x160>)
 8000c0c:	f000 fe92 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c10:	2386      	movs	r3, #134	@ 0x86
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <HAL_ETH_MspInit+0x164>)
 8000c2c:	f000 fe82 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c42:	230b      	movs	r3, #11
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <HAL_ETH_MspInit+0x168>)
 8000c4e:	f000 fe71 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c52:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <HAL_ETH_MspInit+0x16c>)
 8000c70:	f000 fe60 	bl	8001934 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c74:	bf00      	nop
 8000c76:	3738      	adds	r7, #56	@ 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40028000 	.word	0x40028000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40021800 	.word	0x40021800

08000c94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ae      	sub	sp, #184	@ 0xb8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2290      	movs	r2, #144	@ 0x90
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fbd1 	bl	800445c <memset>
  if(huart->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <HAL_UART_MspInit+0xf0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d15b      	bne.n	8000d7c <HAL_UART_MspInit+0xe8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fe63 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cdc:	f7ff fef8 	bl	8000ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce0:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	4a28      	ldr	r2, [pc, #160]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cec:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	4a22      	ldr	r2, [pc, #136]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <HAL_UART_MspInit+0xf4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	@ (8000d8c <HAL_UART_MspInit+0xf8>)
 8000d4e:	f000 fdf1 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d52:	2320      	movs	r3, #32
 8000d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <HAL_UART_MspInit+0xfc>)
 8000d78:	f000 fddc 	bl	8001934 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	37b8      	adds	r7, #184	@ 0xb8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ae      	sub	sp, #184	@ 0xb8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2290      	movs	r2, #144	@ 0x90
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f003 fb51 	bl	800445c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dc2:	d159      	bne.n	8000e78 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dc4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fde1 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000de0:	f7ff fe76 	bl	8000ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	4a25      	ldr	r2, [pc, #148]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df0:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dfc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e16:	230a      	movs	r3, #10
 8000e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <HAL_PCD_MspInit+0xf0>)
 8000e24:	f000 fd86 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4810      	ldr	r0, [pc, #64]	@ (8000e84 <HAL_PCD_MspInit+0xf0>)
 8000e44:	f000 fd76 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e52:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e64:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <HAL_PCD_MspInit+0xec>)
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e78:	bf00      	nop
 8000e7a:	37b8      	adds	r7, #184	@ 0xb8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f8b1 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f003 faa8 	bl	800446c <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20080000 	.word	0x20080000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000898 	.word	0x20000898
 8000f50:	200009e8 	.word	0x200009e8

08000f54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f003 fa67 	bl	8004478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fb57 	bl	800065c <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fbc:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 8000fc0:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8000fc4:	200009e8 	.word	0x200009e8

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>

08000fca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f000 f92e 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 f805 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fda:	f7ff fd7f 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f93b 	bl	800127e <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f911 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000089c 	.word	0x2000089c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000089c 	.word	0x2000089c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	@ (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	@ (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	@ (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff5c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffb0 	bl	80011ec <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e086      	b.n	80013b8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fc31 	bl	8000b24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <HAL_ETH_Init+0x128>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a3e      	ldr	r2, [pc, #248]	@ (80013c0 <HAL_ETH_Init+0x128>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <HAL_ETH_Init+0x128>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012da:	4b3a      	ldr	r3, [pc, #232]	@ (80013c4 <HAL_ETH_Init+0x12c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a39      	ldr	r2, [pc, #228]	@ (80013c4 <HAL_ETH_Init+0x12c>)
 80012e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012e6:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <HAL_ETH_Init+0x12c>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <HAL_ETH_Init+0x12c>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012f4:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <HAL_ETH_Init+0x12c>)
 80012f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800130e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff feac 	bl	800106c <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001316:	e011      	b.n	800133c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001318:	f7ff fea8 	bl	800106c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001326:	d909      	bls.n	800133c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2204      	movs	r2, #4
 800132c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	22e0      	movs	r2, #224	@ 0xe0
 8001334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e03d      	b.n	80013b8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1e4      	bne.n	8001318 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f97a 	bl	8001648 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fa25 	bl	80017a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fa7b 	bl	8001856 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f9e3 	bl	8001734 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800137c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_ETH_Init+0x130>)
 800138c:	430b      	orrs	r3, r1
 800138e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80013a2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2210      	movs	r2, #16
 80013b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	00020060 	.word	0x00020060

080013cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <ETH_SetMACConfig+0x164>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	7b9b      	ldrb	r3, [r3, #14]
 80013ea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	7c12      	ldrb	r2, [r2, #16]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d102      	bne.n	80013fa <ETH_SetMACConfig+0x2e>
 80013f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013f8:	e000      	b.n	80013fc <ETH_SetMACConfig+0x30>
 80013fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	7c52      	ldrb	r2, [r2, #17]
 8001402:	2a00      	cmp	r2, #0
 8001404:	d102      	bne.n	800140c <ETH_SetMACConfig+0x40>
 8001406:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800140a:	e000      	b.n	800140e <ETH_SetMACConfig+0x42>
 800140c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800140e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001414:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	7fdb      	ldrb	r3, [r3, #31]
 800141a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800141c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	7f92      	ldrb	r2, [r2, #30]
 8001428:	2a00      	cmp	r2, #0
 800142a:	d102      	bne.n	8001432 <ETH_SetMACConfig+0x66>
 800142c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001430:	e000      	b.n	8001434 <ETH_SetMACConfig+0x68>
 8001432:	2200      	movs	r2, #0
                        macconf->Speed |
 8001434:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	7f1b      	ldrb	r3, [r3, #28]
 800143a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800143c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001442:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800144a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001452:	2a00      	cmp	r2, #0
 8001454:	d102      	bne.n	800145c <ETH_SetMACConfig+0x90>
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	e000      	b.n	800145e <ETH_SetMACConfig+0x92>
 800145c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800145e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	7bdb      	ldrb	r3, [r3, #15]
 8001464:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001466:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800146c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001474:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001476:	4313      	orrs	r3, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fdf8 	bl	8001084 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80014aa:	4013      	ands	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014ba:	2a00      	cmp	r2, #0
 80014bc:	d101      	bne.n	80014c2 <ETH_SetMACConfig+0xf6>
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	e000      	b.n	80014c4 <ETH_SetMACConfig+0xf8>
 80014c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014d2:	2a01      	cmp	r2, #1
 80014d4:	d101      	bne.n	80014da <ETH_SetMACConfig+0x10e>
 80014d6:	2208      	movs	r2, #8
 80014d8:	e000      	b.n	80014dc <ETH_SetMACConfig+0x110>
 80014da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014e4:	2a01      	cmp	r2, #1
 80014e6:	d101      	bne.n	80014ec <ETH_SetMACConfig+0x120>
 80014e8:	2204      	movs	r2, #4
 80014ea:	e000      	b.n	80014ee <ETH_SetMACConfig+0x122>
 80014ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014f6:	2a01      	cmp	r2, #1
 80014f8:	d101      	bne.n	80014fe <ETH_SetMACConfig+0x132>
 80014fa:	2202      	movs	r2, #2
 80014fc:	e000      	b.n	8001500 <ETH_SetMACConfig+0x134>
 80014fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001500:	4313      	orrs	r3, r2
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff fdb3 	bl	8001084 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	fd20810f 	.word	0xfd20810f

08001534 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <ETH_SetDMAConfig+0x110>)
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7b1b      	ldrb	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <ETH_SetDMAConfig+0x2c>
 800155a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800155e:	e000      	b.n	8001562 <ETH_SetDMAConfig+0x2e>
 8001560:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7b5b      	ldrb	r3, [r3, #13]
 8001566:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001568:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	7f52      	ldrb	r2, [r2, #29]
 800156e:	2a00      	cmp	r2, #0
 8001570:	d102      	bne.n	8001578 <ETH_SetDMAConfig+0x44>
 8001572:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001576:	e000      	b.n	800157a <ETH_SetDMAConfig+0x46>
 8001578:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800157a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	7b9b      	ldrb	r3, [r3, #14]
 8001580:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001582:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001588:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	7f1b      	ldrb	r3, [r3, #28]
 800158e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001590:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	7f9b      	ldrb	r3, [r3, #30]
 8001596:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001598:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800159e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015a8:	4313      	orrs	r3, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fd5a 	bl	8001084 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d8:	461a      	mov	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001606:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800160c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001616:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800161a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff fd2b 	bl	8001084 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	f8de3f23 	.word	0xf8de3f23

08001648 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0a6      	sub	sp, #152	@ 0x98
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001650:	2301      	movs	r3, #1
 8001652:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001672:	2301      	movs	r3, #1
 8001674:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800168a:	2300      	movs	r3, #0
 800168c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001694:	2300      	movs	r3, #0
 8001696:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fe7f 	bl	80013cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016dc:	2301      	movs	r3, #1
 80016de:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001702:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001704:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001708:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff05 	bl	8001534 <ETH_SetDMAConfig>
}
 800172a:	bf00      	nop
 800172c:	3798      	adds	r7, #152	@ 0x98
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3305      	adds	r3, #5
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	3204      	adds	r2, #4
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <ETH_MACAddressConfig+0x68>)
 8001756:	4413      	add	r3, r2
 8001758:	461a      	mov	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3303      	adds	r3, #3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	061a      	lsls	r2, r3, #24
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3302      	adds	r3, #2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	4313      	orrs	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <ETH_MACAddressConfig+0x6c>)
 8001786:	4413      	add	r3, r2
 8001788:	461a      	mov	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	6013      	str	r3, [r2, #0]
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40028040 	.word	0x40028040
 80017a0:	40028044 	.word	0x40028044

080017a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e03e      	b.n	8001830 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68d9      	ldr	r1, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	3206      	adds	r2, #6
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d80c      	bhi.n	8001814 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68d9      	ldr	r1, [r3, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	461a      	mov	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	e004      	b.n	800181e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d9bd      	bls.n	80017b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e048      	b.n	80018f6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	3212      	adds	r2, #18
 80018c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d80c      	bhi.n	80018e6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	e004      	b.n	80018f0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d9b3      	bls.n	8001864 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e175      	b.n	8001c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8164 	bne.w	8001c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x56>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80be 	beq.w	8001c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b66      	ldr	r3, [pc, #408]	@ (8001c58 <HAL_GPIO_Init+0x324>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a65      	ldr	r2, [pc, #404]	@ (8001c58 <HAL_GPIO_Init+0x324>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <HAL_GPIO_Init+0x324>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ad6:	4a61      	ldr	r2, [pc, #388]	@ (8001c5c <HAL_GPIO_Init+0x328>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <HAL_GPIO_Init+0x32c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d037      	beq.n	8001b72 <HAL_GPIO_Init+0x23e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a57      	ldr	r2, [pc, #348]	@ (8001c64 <HAL_GPIO_Init+0x330>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d031      	beq.n	8001b6e <HAL_GPIO_Init+0x23a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a56      	ldr	r2, [pc, #344]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02b      	beq.n	8001b6a <HAL_GPIO_Init+0x236>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a55      	ldr	r2, [pc, #340]	@ (8001c6c <HAL_GPIO_Init+0x338>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d025      	beq.n	8001b66 <HAL_GPIO_Init+0x232>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a54      	ldr	r2, [pc, #336]	@ (8001c70 <HAL_GPIO_Init+0x33c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01f      	beq.n	8001b62 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a53      	ldr	r2, [pc, #332]	@ (8001c74 <HAL_GPIO_Init+0x340>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x22a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	@ (8001c78 <HAL_GPIO_Init+0x344>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a51      	ldr	r2, [pc, #324]	@ (8001c7c <HAL_GPIO_Init+0x348>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	@ (8001c80 <HAL_GPIO_Init+0x34c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	@ (8001c84 <HAL_GPIO_Init+0x350>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	e012      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b4e:	230a      	movs	r3, #10
 8001b50:	e010      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b52:	2308      	movs	r3, #8
 8001b54:	e00e      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b5a:	2306      	movs	r3, #6
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	@ (8001c5c <HAL_GPIO_Init+0x328>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b3d      	ldr	r3, [pc, #244]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a29      	ldr	r2, [pc, #164]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <HAL_GPIO_Init+0x354>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f ae86 	bls.w	8001954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40021c00 	.word	0x40021c00
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40022400 	.word	0x40022400
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af02      	add	r7, sp, #8
 8001cc4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e108      	b.n	8001ee2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff f852 	bl	8000d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 f8e8 	bl	8003ee0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7c1a      	ldrb	r2, [r3, #16]
 8001d18:	f88d 2000 	strb.w	r2, [sp]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d20:	f002 f884 	bl	8003e2c <USB_CoreInit>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0d5      	b.n	8001ee2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 f8e0 	bl	8003f02 <USB_SetCurrentMode>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0c6      	b.n	8001ee2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e04a      	b.n	8001df0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3315      	adds	r3, #21
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	b298      	uxth	r0, r3
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	332e      	adds	r3, #46	@ 0x2e
 8001d96:	4602      	mov	r2, r0
 8001d98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3318      	adds	r3, #24
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	331c      	adds	r3, #28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	3320      	adds	r3, #32
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3324      	adds	r3, #36	@ 0x24
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	3301      	adds	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3af      	bcc.n	8001d5a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e044      	b.n	8001e8a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	3301      	adds	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3b5      	bcc.n	8001e00 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7c1a      	ldrb	r2, [r3, #16]
 8001e9c:	f88d 2000 	strb.w	r2, [sp]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea4:	f002 f87a 	bl	8003f9c <USB_DevInit>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e013      	b.n	8001ee2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7b1b      	ldrb	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f80b 	bl	8001eec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fa35 	bl	800434a <USB_DevDisconnect>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f1a:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	10000003 	.word	0x10000003

08001f34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <HAL_PWREx_EnableOverDrive+0x98>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_PWREx_EnableOverDrive+0x98>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_PWREx_EnableOverDrive+0x98>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f82:	f7ff f873 	bl	800106c <HAL_GetTick>
 8001f86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f88:	e009      	b.n	8001f9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f8a:	f7ff f86f 	bl	800106c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f98:	d901      	bls.n	8001f9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e022      	b.n	8001fe4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001faa:	d1ee      	bne.n	8001f8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb8:	f7ff f858 	bl	800106c <HAL_GetTick>
 8001fbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fbe:	e009      	b.n	8001fd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc0:	f7ff f854 	bl	800106c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fce:	d901      	bls.n	8001fd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e007      	b.n	8001fe4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e29b      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8087 	beq.w	8002126 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002018:	4b96      	ldr	r3, [pc, #600]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b04      	cmp	r3, #4
 8002022:	d00c      	beq.n	800203e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002024:	4b93      	ldr	r3, [pc, #588]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d112      	bne.n	8002056 <HAL_RCC_OscConfig+0x62>
 8002030:	4b90      	ldr	r3, [pc, #576]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203c:	d10b      	bne.n	8002056 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203e:	4b8d      	ldr	r3, [pc, #564]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06c      	beq.n	8002124 <HAL_RCC_OscConfig+0x130>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d168      	bne.n	8002124 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e275      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x7a>
 8002060:	4b84      	ldr	r3, [pc, #528]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a83      	ldr	r2, [pc, #524]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e02e      	b.n	80020cc <HAL_RCC_OscConfig+0xd8>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x9c>
 8002076:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7e      	ldr	r2, [pc, #504]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800207c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b7c      	ldr	r3, [pc, #496]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7b      	ldr	r2, [pc, #492]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xd8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0xc0>
 800209a:	4b76      	ldr	r3, [pc, #472]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a75      	ldr	r2, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b73      	ldr	r3, [pc, #460]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a72      	ldr	r2, [pc, #456]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xd8>
 80020b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe ffca 	bl	800106c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe ffc6 	bl	800106c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e229      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b61      	ldr	r3, [pc, #388]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xe8>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe ffb6 	bl	800106c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe ffb2 	bl	800106c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	@ 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e215      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b57      	ldr	r3, [pc, #348]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x110>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d069      	beq.n	8002206 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002132:	4b50      	ldr	r3, [pc, #320]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x190>
 800214a:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x17a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1e9      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	493d      	ldr	r1, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e040      	b.n	8002206 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a38      	ldr	r2, [pc, #224]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe ff68 	bl	800106c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a0:	f7fe ff64 	bl	800106c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1c7      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4929      	ldr	r1, [pc, #164]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
 80021d2:	e018      	b.n	8002206 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff44 	bl	800106c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe ff40 	bl	800106c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1a3      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d038      	beq.n	8002284 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d019      	beq.n	800224e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 800221c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221e:	4a15      	ldr	r2, [pc, #84]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7fe ff21 	bl	800106c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe ff1d 	bl	800106c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e180      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x23a>
 800224c:	e01a      	b.n	8002284 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_RCC_OscConfig+0x280>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe ff07 	bl	800106c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002262:	f7fe ff03 	bl	800106c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d903      	bls.n	8002278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e166      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
 8002274:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	4b92      	ldr	r3, [pc, #584]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a4 	beq.w	80023da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b8c      	ldr	r3, [pc, #560]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b89      	ldr	r3, [pc, #548]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a88      	ldr	r2, [pc, #544]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b86      	ldr	r3, [pc, #536]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ba:	4b83      	ldr	r3, [pc, #524]	@ (80024c8 <HAL_RCC_OscConfig+0x4d4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d118      	bne.n	80022f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022c6:	4b80      	ldr	r3, [pc, #512]	@ (80024c8 <HAL_RCC_OscConfig+0x4d4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7f      	ldr	r2, [pc, #508]	@ (80024c8 <HAL_RCC_OscConfig+0x4d4>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fecb 	bl	800106c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe fec7 	bl	800106c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b64      	cmp	r3, #100	@ 0x64
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e12a      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	4b76      	ldr	r3, [pc, #472]	@ (80024c8 <HAL_RCC_OscConfig+0x4d4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x31a>
 8002300:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a6f      	ldr	r2, [pc, #444]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
 800230c:	e02d      	b.n	800236a <HAL_RCC_OscConfig+0x376>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x33c>
 8002316:	4b6b      	ldr	r3, [pc, #428]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	4a6a      	ldr	r2, [pc, #424]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	@ 0x70
 8002322:	4b68      	ldr	r3, [pc, #416]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002326:	4a67      	ldr	r2, [pc, #412]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	6713      	str	r3, [r2, #112]	@ 0x70
 800232e:	e01c      	b.n	800236a <HAL_RCC_OscConfig+0x376>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d10c      	bne.n	8002352 <HAL_RCC_OscConfig+0x35e>
 8002338:	4b62      	ldr	r3, [pc, #392]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4a61      	ldr	r2, [pc, #388]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
 8002344:	4b5f      	ldr	r3, [pc, #380]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	4a5e      	ldr	r2, [pc, #376]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002350:	e00b      	b.n	800236a <HAL_RCC_OscConfig+0x376>
 8002352:	4b5c      	ldr	r3, [pc, #368]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	4a5b      	ldr	r2, [pc, #364]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6713      	str	r3, [r2, #112]	@ 0x70
 800235e:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	4a58      	ldr	r2, [pc, #352]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe fe7b 	bl	800106c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7fe fe77 	bl	800106c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0d8      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	4b4c      	ldr	r3, [pc, #304]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ee      	beq.n	800237a <HAL_RCC_OscConfig+0x386>
 800239c:	e014      	b.n	80023c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe fe65 	bl	800106c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fe61 	bl	800106c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0c2      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	4b41      	ldr	r3, [pc, #260]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ee      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d105      	bne.n	80023da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	4a3c      	ldr	r2, [pc, #240]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80ae 	beq.w	8002540 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e4:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d06d      	beq.n	80024cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d14b      	bne.n	8002490 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fe32 	bl	800106c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe2e 	bl	800106c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e091      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b29      	ldr	r3, [pc, #164]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	491b      	ldr	r1, [pc, #108]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a18      	ldr	r2, [pc, #96]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fe00 	bl	800106c <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fdfc 	bl	800106c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e05f      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x47c>
 800248e:	e057      	b.n	8002540 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0b      	ldr	r2, [pc, #44]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 8002496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fde6 	bl	800106c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fde2 	bl	800106c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e045      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4b0>
 80024c2:	e03d      	b.n	8002540 <HAL_RCC_OscConfig+0x54c>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024cc:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <HAL_RCC_OscConfig+0x558>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d030      	beq.n	800253c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d129      	bne.n	800253c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d122      	bne.n	800253c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002502:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	d119      	bne.n	800253c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d10f      	bne.n	800253c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0d0      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b67      	ldr	r3, [pc, #412]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 020f 	bic.w	r2, r3, #15
 800257e:	4965      	ldr	r1, [pc, #404]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a58      	ldr	r2, [pc, #352]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a52      	ldr	r2, [pc, #328]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d040      	beq.n	8002674 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e073      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4936      	ldr	r1, [pc, #216]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fd12 	bl	800106c <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7fe fd0e 	bl	800106c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e053      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d210      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 020f 	bic.w	r2, r3, #15
 800268a:	4922      	ldr	r1, [pc, #136]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ce:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	@ (800271c <HAL_RCC_ClockConfig+0x1cc>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	@ (8002720 <HAL_RCC_ClockConfig+0x1d0>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fc6e 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00
 8002718:	40023800 	.word	0x40023800
 800271c:	08004db8 	.word	0x08004db8
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b094      	sub	sp, #80	@ 0x50
 800272e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	647b      	str	r3, [r7, #68]	@ 0x44
 8002734:	2300      	movs	r3, #0
 8002736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002738:	2300      	movs	r3, #0
 800273a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002740:	4b79      	ldr	r3, [pc, #484]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d00d      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x40>
 800274c:	2b08      	cmp	r3, #8
 800274e:	f200 80e1 	bhi.w	8002914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x34>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d003      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x3a>
 800275a:	e0db      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b73      	ldr	r3, [pc, #460]	@ (800292c <HAL_RCC_GetSysClockFreq+0x204>)
 800275e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002760:	e0db      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002762:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x208>)
 8002764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002766:	e0d8      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b6f      	ldr	r3, [pc, #444]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002770:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002772:	4b6d      	ldr	r3, [pc, #436]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277e:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	099b      	lsrs	r3, r3, #6
 8002784:	2200      	movs	r2, #0
 8002786:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002788:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002790:	633b      	str	r3, [r7, #48]	@ 0x30
 8002792:	2300      	movs	r3, #0
 8002794:	637b      	str	r3, [r7, #52]	@ 0x34
 8002796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800279a:	4622      	mov	r2, r4
 800279c:	462b      	mov	r3, r5
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ac:	0150      	lsls	r0, r2, #5
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4621      	mov	r1, r4
 80027b4:	1a51      	subs	r1, r2, r1
 80027b6:	6139      	str	r1, [r7, #16]
 80027b8:	4629      	mov	r1, r5
 80027ba:	eb63 0301 	sbc.w	r3, r3, r1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027cc:	4659      	mov	r1, fp
 80027ce:	018b      	lsls	r3, r1, #6
 80027d0:	4651      	mov	r1, sl
 80027d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d6:	4651      	mov	r1, sl
 80027d8:	018a      	lsls	r2, r1, #6
 80027da:	4651      	mov	r1, sl
 80027dc:	ebb2 0801 	subs.w	r8, r2, r1
 80027e0:	4659      	mov	r1, fp
 80027e2:	eb63 0901 	sbc.w	r9, r3, r1
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	4623      	mov	r3, r4
 8002800:	eb18 0303 	adds.w	r3, r8, r3
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	462b      	mov	r3, r5
 8002808:	eb49 0303 	adc.w	r3, r9, r3
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800281a:	4629      	mov	r1, r5
 800281c:	024b      	lsls	r3, r1, #9
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002824:	4621      	mov	r1, r4
 8002826:	024a      	lsls	r2, r1, #9
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282e:	2200      	movs	r2, #0
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002838:	f7fd fd52 	bl	80002e0 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002844:	e058      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	2200      	movs	r2, #0
 800284e:	4618      	mov	r0, r3
 8002850:	4611      	mov	r1, r2
 8002852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
 800285c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002860:	4642      	mov	r2, r8
 8002862:	464b      	mov	r3, r9
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	0159      	lsls	r1, r3, #5
 800286e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002872:	0150      	lsls	r0, r2, #5
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4641      	mov	r1, r8
 800287a:	ebb2 0a01 	subs.w	sl, r2, r1
 800287e:	4649      	mov	r1, r9
 8002880:	eb63 0b01 	sbc.w	fp, r3, r1
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002898:	ebb2 040a 	subs.w	r4, r2, sl
 800289c:	eb63 050b 	sbc.w	r5, r3, fp
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	00eb      	lsls	r3, r5, #3
 80028aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ae:	00e2      	lsls	r2, r4, #3
 80028b0:	4614      	mov	r4, r2
 80028b2:	461d      	mov	r5, r3
 80028b4:	4643      	mov	r3, r8
 80028b6:	18e3      	adds	r3, r4, r3
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	464b      	mov	r3, r9
 80028bc:	eb45 0303 	adc.w	r3, r5, r3
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ce:	4629      	mov	r1, r5
 80028d0:	028b      	lsls	r3, r1, #10
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d8:	4621      	mov	r1, r4
 80028da:	028a      	lsls	r2, r1, #10
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e2:	2200      	movs	r2, #0
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	61fa      	str	r2, [r7, #28]
 80028e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ec:	f7fd fcf8 	bl	80002e0 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	3301      	adds	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800290a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002912:	e002      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_RCC_GetSysClockFreq+0x204>)
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800291c:	4618      	mov	r0, r3
 800291e:	3750      	adds	r7, #80	@ 0x50
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	00f42400 	.word	0x00f42400
 8002930:	007a1200 	.word	0x007a1200

08002934 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_RCC_GetHCLKFreq+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000000 	.word	0x20000000

0800294c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002950:	f7ff fff0 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0a9b      	lsrs	r3, r3, #10
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08004dc8 	.word	0x08004dc8

08002974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002978:	f7ff ffdc 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 800297c:	4602      	mov	r2, r0
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	0b5b      	lsrs	r3, r3, #13
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4903      	ldr	r1, [pc, #12]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	08004dc8 	.word	0x08004dc8

0800299c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c4:	4b69      	ldr	r3, [pc, #420]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a68      	ldr	r2, [pc, #416]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029ce:	6093      	str	r3, [r2, #8]
 80029d0:	4b66      	ldr	r3, [pc, #408]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d8:	4964      	ldr	r1, [pc, #400]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a04:	4959      	ldr	r1, [pc, #356]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a32:	4b4e      	ldr	r3, [pc, #312]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	494a      	ldr	r1, [pc, #296]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 808b 	beq.w	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b3a      	ldr	r3, [pc, #232]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	4a39      	ldr	r2, [pc, #228]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8c:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a98:	4b35      	ldr	r3, [pc, #212]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a34      	ldr	r2, [pc, #208]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fae2 	bl	800106c <HAL_GetTick>
 8002aa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe fade 	bl	800106c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	@ 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e38f      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aca:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d035      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d02e      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae8:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002afe:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	4a1a      	ldr	r2, [pc, #104]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b0a:	4a18      	ldr	r2, [pc, #96]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b10:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d114      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe faa6 	bl	800106c <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe faa2 	bl	800106c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e351      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ee      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b52:	d111      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b62:	400b      	ands	r3, r1
 8002b64:	4901      	ldr	r1, [pc, #4]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000
 8002b74:	0ffffcff 	.word	0x0ffffcff
 8002b78:	4bac      	ldr	r3, [pc, #688]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4aab      	ldr	r2, [pc, #684]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b82:	6093      	str	r3, [r2, #8]
 8002b84:	4ba9      	ldr	r3, [pc, #676]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	49a6      	ldr	r1, [pc, #664]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ba2:	4ba2      	ldr	r3, [pc, #648]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba8:	4aa0      	ldr	r2, [pc, #640]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbc:	499b      	ldr	r1, [pc, #620]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd0:	4b96      	ldr	r3, [pc, #600]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bde:	4993      	ldr	r1, [pc, #588]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf2:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c00:	498a      	ldr	r1, [pc, #552]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c14:	4b85      	ldr	r3, [pc, #532]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c22:	4982      	ldr	r1, [pc, #520]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c36:	4b7d      	ldr	r3, [pc, #500]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4979      	ldr	r1, [pc, #484]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c58:	4b74      	ldr	r3, [pc, #464]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4971      	ldr	r1, [pc, #452]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c80:	f023 020c 	bic.w	r2, r3, #12
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c88:	4968      	ldr	r1, [pc, #416]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c9c:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002caa:	4960      	ldr	r1, [pc, #384]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ccc:	4957      	ldr	r1, [pc, #348]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ce0:	4b52      	ldr	r3, [pc, #328]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	494f      	ldr	r1, [pc, #316]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d02:	4b4a      	ldr	r3, [pc, #296]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d10:	4946      	ldr	r1, [pc, #280]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d24:	4b41      	ldr	r3, [pc, #260]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	493e      	ldr	r1, [pc, #248]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d46:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d54:	4935      	ldr	r1, [pc, #212]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d68:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d76:	492d      	ldr	r1, [pc, #180]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d011      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d8a:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d98:	4924      	ldr	r1, [pc, #144]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002da8:	d101      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dca:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	4914      	ldr	r1, [pc, #80]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dfc:	490b      	ldr	r1, [pc, #44]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00f      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e20:	4902      	ldr	r1, [pc, #8]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e28:	e002      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	4986      	ldr	r1, [pc, #536]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e60:	4b81      	ldr	r3, [pc, #516]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e70:	497d      	ldr	r1, [pc, #500]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d006      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80d6 	beq.w	8003038 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e8c:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a75      	ldr	r2, [pc, #468]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe f8e8 	bl	800106c <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ea0:	f7fe f8e4 	bl	800106c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e195      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d021      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11d      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ed2:	4b65      	ldr	r3, [pc, #404]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ee0:	4b61      	ldr	r3, [pc, #388]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	0e1b      	lsrs	r3, r3, #24
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	019a      	lsls	r2, r3, #6
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	4958      	ldr	r1, [pc, #352]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02e      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f38:	d129      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f48:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4e:	0f1b      	lsrs	r3, r3, #28
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	019a      	lsls	r2, r3, #6
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	493e      	ldr	r1, [pc, #248]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f76:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7c:	f023 021f 	bic.w	r2, r3, #31
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	3b01      	subs	r3, #1
 8002f86:	4938      	ldr	r1, [pc, #224]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f9a:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fae:	0f1b      	lsrs	r3, r3, #28
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	019a      	lsls	r2, r3, #6
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	071b      	lsls	r3, r3, #28
 8002fce:	4926      	ldr	r1, [pc, #152]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d011      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	019a      	lsls	r2, r3, #6
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	491a      	ldr	r1, [pc, #104]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003006:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a17      	ldr	r2, [pc, #92]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003012:	f7fe f82b 	bl	800106c <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800301a:	f7fe f827 	bl	800106c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	@ 0x64
 8003026:	d901      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0d8      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800302c:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 80ce 	bne.w	80031dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a08      	ldr	r2, [pc, #32]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe f80e 	bl	800106c <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003052:	e00b      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003054:	f7fe f80a 	bl	800106c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	@ 0x64
 8003060:	d904      	bls.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0bb      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800306c:	4b5e      	ldr	r3, [pc, #376]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003078:	d0ec      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02e      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d12a      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030a2:	4b51      	ldr	r3, [pc, #324]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030b0:	4b4d      	ldr	r3, [pc, #308]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	0f1b      	lsrs	r3, r3, #28
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	019a      	lsls	r2, r3, #6
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	4944      	ldr	r1, [pc, #272]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030de:	4b42      	ldr	r3, [pc, #264]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	493d      	ldr	r1, [pc, #244]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d022      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003108:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800310c:	d11d      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310e:	4b36      	ldr	r3, [pc, #216]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	0e1b      	lsrs	r3, r3, #24
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800311c:	4b32      	ldr	r3, [pc, #200]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003122:	0f1b      	lsrs	r3, r3, #28
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	019a      	lsls	r2, r3, #6
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	071b      	lsls	r3, r3, #28
 8003142:	4929      	ldr	r1, [pc, #164]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d028      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003156:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315c:	0e1b      	lsrs	r3, r3, #24
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003164:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	019a      	lsls	r2, r3, #6
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	431a      	orrs	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	071b      	lsls	r3, r3, #28
 800318a:	4917      	ldr	r1, [pc, #92]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003198:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	4911      	ldr	r1, [pc, #68]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031a8:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0e      	ldr	r2, [pc, #56]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fd ff5a 	bl	800106c <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031bc:	f7fd ff56 	bl	800106c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e007      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031da:	d1ef      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e040      	b.n	8003280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fd40 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	@ 0x24
 8003218:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fbde 	bl	80039f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f977 	bl	800352c <UART_SetConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e01b      	b.n	8003280 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fc5d 	bl	8003b38 <UART_CheckIdleState>
 800327e:	4603      	mov	r3, r0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800329c:	2b20      	cmp	r3, #32
 800329e:	d177      	bne.n	8003390 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Transmit+0x24>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e070      	b.n	8003392 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2221      	movs	r2, #33	@ 0x21
 80032bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032be:	f7fd fed5 	bl	800106c <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Transmit+0x68>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032f8:	e02f      	b.n	800335a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fcbf 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e03b      	b.n	8003392 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	3302      	adds	r3, #2
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e007      	b.n	8003348 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1c9      	bne.n	80032fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2140      	movs	r1, #64	@ 0x40
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fc89 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e005      	b.n	8003392 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	@ 0x28
 800339e:	af02      	add	r7, sp, #8
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f040 80b5 	bne.w	8003520 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_UART_Receive+0x28>
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0ad      	b.n	8003522 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2222      	movs	r2, #34	@ 0x22
 80033d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033dc:	f7fd fe46 	bl	800106c <HAL_GetTick>
 80033e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fa:	d10e      	bne.n	800341a <HAL_UART_Receive+0x80>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_UART_Receive+0x76>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800340a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800340e:	e02d      	b.n	800346c <HAL_UART_Receive+0xd2>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003418:	e028      	b.n	800346c <HAL_UART_Receive+0xd2>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_UART_Receive+0xa4>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_UART_Receive+0x9a>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	22ff      	movs	r2, #255	@ 0xff
 800342e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003432:	e01b      	b.n	800346c <HAL_UART_Receive+0xd2>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	227f      	movs	r2, #127	@ 0x7f
 8003438:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800343c:	e016      	b.n	800346c <HAL_UART_Receive+0xd2>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003446:	d10d      	bne.n	8003464 <HAL_UART_Receive+0xca>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_UART_Receive+0xc0>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	227f      	movs	r2, #127	@ 0x7f
 8003454:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003458:	e008      	b.n	800346c <HAL_UART_Receive+0xd2>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	223f      	movs	r2, #63	@ 0x3f
 800345e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003462:	e003      	b.n	800346c <HAL_UART_Receive+0xd2>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003472:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347c:	d108      	bne.n	8003490 <HAL_UART_Receive+0xf6>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e003      	b.n	8003498 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003498:	e036      	b.n	8003508 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2120      	movs	r1, #32
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fbef 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e032      	b.n	8003522 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10c      	bne.n	80034dc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	8a7b      	ldrh	r3, [r7, #18]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3302      	adds	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e00c      	b.n	80034f6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	8a7b      	ldrh	r3, [r7, #18]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4013      	ands	r3, r2
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1c2      	bne.n	800349a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4ba6      	ldr	r3, [pc, #664]	@ (80037f0 <UART_SetConfig+0x2c4>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	430b      	orrs	r3, r1
 8003562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a94      	ldr	r2, [pc, #592]	@ (80037f4 <UART_SetConfig+0x2c8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0xbe>
 80035a8:	4b93      	ldr	r3, [pc, #588]	@ (80037f8 <UART_SetConfig+0x2cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d816      	bhi.n	80035e4 <UART_SetConfig+0xb8>
 80035b6:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <UART_SetConfig+0x90>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d9 	.word	0x080035d9
 80035c4:	080035d3 	.word	0x080035d3
 80035c8:	080035df 	.word	0x080035df
 80035cc:	2301      	movs	r3, #1
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e150      	b.n	8003874 <UART_SetConfig+0x348>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e14d      	b.n	8003874 <UART_SetConfig+0x348>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e14a      	b.n	8003874 <UART_SetConfig+0x348>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e147      	b.n	8003874 <UART_SetConfig+0x348>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e144      	b.n	8003874 <UART_SetConfig+0x348>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a83      	ldr	r2, [pc, #524]	@ (80037fc <UART_SetConfig+0x2d0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d132      	bne.n	800365a <UART_SetConfig+0x12e>
 80035f4:	4b80      	ldr	r3, [pc, #512]	@ (80037f8 <UART_SetConfig+0x2cc>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d828      	bhi.n	8003654 <UART_SetConfig+0x128>
 8003602:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <UART_SetConfig+0xdc>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003655 	.word	0x08003655
 8003610:	08003655 	.word	0x08003655
 8003614:	08003655 	.word	0x08003655
 8003618:	08003649 	.word	0x08003649
 800361c:	08003655 	.word	0x08003655
 8003620:	08003655 	.word	0x08003655
 8003624:	08003655 	.word	0x08003655
 8003628:	08003643 	.word	0x08003643
 800362c:	08003655 	.word	0x08003655
 8003630:	08003655 	.word	0x08003655
 8003634:	08003655 	.word	0x08003655
 8003638:	0800364f 	.word	0x0800364f
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e118      	b.n	8003874 <UART_SetConfig+0x348>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e115      	b.n	8003874 <UART_SetConfig+0x348>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e112      	b.n	8003874 <UART_SetConfig+0x348>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e10f      	b.n	8003874 <UART_SetConfig+0x348>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e10c      	b.n	8003874 <UART_SetConfig+0x348>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a68      	ldr	r2, [pc, #416]	@ (8003800 <UART_SetConfig+0x2d4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0x17a>
 8003664:	4b64      	ldr	r3, [pc, #400]	@ (80037f8 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800366e:	2b30      	cmp	r3, #48	@ 0x30
 8003670:	d013      	beq.n	800369a <UART_SetConfig+0x16e>
 8003672:	2b30      	cmp	r3, #48	@ 0x30
 8003674:	d814      	bhi.n	80036a0 <UART_SetConfig+0x174>
 8003676:	2b20      	cmp	r3, #32
 8003678:	d009      	beq.n	800368e <UART_SetConfig+0x162>
 800367a:	2b20      	cmp	r3, #32
 800367c:	d810      	bhi.n	80036a0 <UART_SetConfig+0x174>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <UART_SetConfig+0x15c>
 8003682:	2b10      	cmp	r3, #16
 8003684:	d006      	beq.n	8003694 <UART_SetConfig+0x168>
 8003686:	e00b      	b.n	80036a0 <UART_SetConfig+0x174>
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e0f2      	b.n	8003874 <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e0ef      	b.n	8003874 <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e0ec      	b.n	8003874 <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e0e9      	b.n	8003874 <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0e6      	b.n	8003874 <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a56      	ldr	r2, [pc, #344]	@ (8003804 <UART_SetConfig+0x2d8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d120      	bne.n	80036f2 <UART_SetConfig+0x1c6>
 80036b0:	4b51      	ldr	r3, [pc, #324]	@ (80037f8 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80036bc:	d013      	beq.n	80036e6 <UART_SetConfig+0x1ba>
 80036be:	2bc0      	cmp	r3, #192	@ 0xc0
 80036c0:	d814      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036c2:	2b80      	cmp	r3, #128	@ 0x80
 80036c4:	d009      	beq.n	80036da <UART_SetConfig+0x1ae>
 80036c6:	2b80      	cmp	r3, #128	@ 0x80
 80036c8:	d810      	bhi.n	80036ec <UART_SetConfig+0x1c0>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <UART_SetConfig+0x1a8>
 80036ce:	2b40      	cmp	r3, #64	@ 0x40
 80036d0:	d006      	beq.n	80036e0 <UART_SetConfig+0x1b4>
 80036d2:	e00b      	b.n	80036ec <UART_SetConfig+0x1c0>
 80036d4:	2300      	movs	r3, #0
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e0cc      	b.n	8003874 <UART_SetConfig+0x348>
 80036da:	2302      	movs	r3, #2
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e0c9      	b.n	8003874 <UART_SetConfig+0x348>
 80036e0:	2304      	movs	r3, #4
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e0c6      	b.n	8003874 <UART_SetConfig+0x348>
 80036e6:	2308      	movs	r3, #8
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e0c3      	b.n	8003874 <UART_SetConfig+0x348>
 80036ec:	2310      	movs	r3, #16
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0c0      	b.n	8003874 <UART_SetConfig+0x348>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	@ (8003808 <UART_SetConfig+0x2dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d125      	bne.n	8003748 <UART_SetConfig+0x21c>
 80036fc:	4b3e      	ldr	r3, [pc, #248]	@ (80037f8 <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800370a:	d017      	beq.n	800373c <UART_SetConfig+0x210>
 800370c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003710:	d817      	bhi.n	8003742 <UART_SetConfig+0x216>
 8003712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003716:	d00b      	beq.n	8003730 <UART_SetConfig+0x204>
 8003718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800371c:	d811      	bhi.n	8003742 <UART_SetConfig+0x216>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <UART_SetConfig+0x1fe>
 8003722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003726:	d006      	beq.n	8003736 <UART_SetConfig+0x20a>
 8003728:	e00b      	b.n	8003742 <UART_SetConfig+0x216>
 800372a:	2300      	movs	r3, #0
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e0a1      	b.n	8003874 <UART_SetConfig+0x348>
 8003730:	2302      	movs	r3, #2
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e09e      	b.n	8003874 <UART_SetConfig+0x348>
 8003736:	2304      	movs	r3, #4
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e09b      	b.n	8003874 <UART_SetConfig+0x348>
 800373c:	2308      	movs	r3, #8
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e098      	b.n	8003874 <UART_SetConfig+0x348>
 8003742:	2310      	movs	r3, #16
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e095      	b.n	8003874 <UART_SetConfig+0x348>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <UART_SetConfig+0x2e0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d125      	bne.n	800379e <UART_SetConfig+0x272>
 8003752:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800375c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003760:	d017      	beq.n	8003792 <UART_SetConfig+0x266>
 8003762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003766:	d817      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800376c:	d00b      	beq.n	8003786 <UART_SetConfig+0x25a>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003772:	d811      	bhi.n	8003798 <UART_SetConfig+0x26c>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <UART_SetConfig+0x254>
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377c:	d006      	beq.n	800378c <UART_SetConfig+0x260>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x26c>
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e076      	b.n	8003874 <UART_SetConfig+0x348>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e073      	b.n	8003874 <UART_SetConfig+0x348>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e070      	b.n	8003874 <UART_SetConfig+0x348>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e06d      	b.n	8003874 <UART_SetConfig+0x348>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e06a      	b.n	8003874 <UART_SetConfig+0x348>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003810 <UART_SetConfig+0x2e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d138      	bne.n	800381a <UART_SetConfig+0x2ee>
 80037a8:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <UART_SetConfig+0x2cc>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80037b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037b6:	d017      	beq.n	80037e8 <UART_SetConfig+0x2bc>
 80037b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037bc:	d82a      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c2:	d00b      	beq.n	80037dc <UART_SetConfig+0x2b0>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c8:	d824      	bhi.n	8003814 <UART_SetConfig+0x2e8>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <UART_SetConfig+0x2aa>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d2:	d006      	beq.n	80037e2 <UART_SetConfig+0x2b6>
 80037d4:	e01e      	b.n	8003814 <UART_SetConfig+0x2e8>
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e04b      	b.n	8003874 <UART_SetConfig+0x348>
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e048      	b.n	8003874 <UART_SetConfig+0x348>
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e045      	b.n	8003874 <UART_SetConfig+0x348>
 80037e8:	2308      	movs	r3, #8
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e042      	b.n	8003874 <UART_SetConfig+0x348>
 80037ee:	bf00      	nop
 80037f0:	efff69f3 	.word	0xefff69f3
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	40011400 	.word	0x40011400
 8003810:	40007800 	.word	0x40007800
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e02c      	b.n	8003874 <UART_SetConfig+0x348>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a72      	ldr	r2, [pc, #456]	@ (80039e8 <UART_SetConfig+0x4bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d125      	bne.n	8003870 <UART_SetConfig+0x344>
 8003824:	4b71      	ldr	r3, [pc, #452]	@ (80039ec <UART_SetConfig+0x4c0>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800382e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003832:	d017      	beq.n	8003864 <UART_SetConfig+0x338>
 8003834:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003838:	d817      	bhi.n	800386a <UART_SetConfig+0x33e>
 800383a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800383e:	d00b      	beq.n	8003858 <UART_SetConfig+0x32c>
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003844:	d811      	bhi.n	800386a <UART_SetConfig+0x33e>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <UART_SetConfig+0x326>
 800384a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800384e:	d006      	beq.n	800385e <UART_SetConfig+0x332>
 8003850:	e00b      	b.n	800386a <UART_SetConfig+0x33e>
 8003852:	2300      	movs	r3, #0
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e00d      	b.n	8003874 <UART_SetConfig+0x348>
 8003858:	2302      	movs	r3, #2
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e00a      	b.n	8003874 <UART_SetConfig+0x348>
 800385e:	2304      	movs	r3, #4
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e007      	b.n	8003874 <UART_SetConfig+0x348>
 8003864:	2308      	movs	r3, #8
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e004      	b.n	8003874 <UART_SetConfig+0x348>
 800386a:	2310      	movs	r3, #16
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e001      	b.n	8003874 <UART_SetConfig+0x348>
 8003870:	2310      	movs	r3, #16
 8003872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800387c:	d15b      	bne.n	8003936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x3aa>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <UART_SetConfig+0x360>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7ff f84c 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7ff f85c 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4b      	ldr	r3, [pc, #300]	@ (80039f0 <UART_SetConfig+0x4c4>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe ff2f 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d074      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	005a      	lsls	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d916      	bls.n	8003930 <UART_SetConfig+0x404>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003908:	d212      	bcs.n	8003930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	b29a      	uxth	r2, r3
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	4313      	orrs	r3, r2
 8003924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	89fa      	ldrh	r2, [r7, #14]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	e04f      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	77bb      	strb	r3, [r7, #30]
 8003934:	e04c      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d828      	bhi.n	800398e <UART_SetConfig+0x462>
 800393c:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <UART_SetConfig+0x418>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe fff0 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7ff f800 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b1d      	ldr	r3, [pc, #116]	@ (80039f0 <UART_SetConfig+0x4c4>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe fed3 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085a      	lsrs	r2, r3, #1
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d909      	bls.n	80039cc <UART_SetConfig+0x4a0>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039be:	d205      	bcs.n	80039cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e001      	b.n	80039d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40007c00 	.word	0x40007c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400

080039f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af2:	d10a      	bne.n	8003b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b098      	sub	sp, #96	@ 0x60
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b48:	f7fd fa90 	bl	800106c <HAL_GetTick>
 8003b4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d12e      	bne.n	8003bba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f88c 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d021      	beq.n	8003bba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e6      	bne.n	8003b76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e062      	b.n	8003c80 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d149      	bne.n	8003c5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f856 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03c      	beq.n	8003c5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	623b      	str	r3, [r7, #32]
   return(result);
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e6      	bne.n	8003be2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c34:	61fa      	str	r2, [r7, #28]
 8003c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	617b      	str	r3, [r7, #20]
   return(result);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e011      	b.n	8003c80 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3758      	adds	r7, #88	@ 0x58
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c98:	e04f      	b.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d04b      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca2:	f7fd f9e3 	bl	800106c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e04e      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d037      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b80      	cmp	r3, #128	@ 0x80
 8003cce:	d034      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d031      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d110      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f838 	bl	8003d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e029      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d14:	d111      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f81e 	bl	8003d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e00f      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d0a0      	beq.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b095      	sub	sp, #84	@ 0x54
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d118      	bne.n	8003e0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f023 0310 	bic.w	r3, r3, #16
 8003dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	613b      	str	r3, [r7, #16]
   return(result);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e6      	bne.n	8003dd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e1e:	bf00      	nop
 8003e20:	3754      	adds	r7, #84	@ 0x54
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	f107 001c 	add.w	r0, r7, #28
 8003e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d121      	bne.n	8003e8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4b21      	ldr	r3, [pc, #132]	@ (8003edc <USB_CoreInit+0xb0>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa92 	bl	80043a8 <USB_CoreReset>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e010      	b.n	8003eac <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa86 	bl	80043a8 <USB_CoreReset>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003eac:	7fbb      	ldrb	r3, [r7, #30]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10b      	bne.n	8003eca <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f043 0206 	orr.w	r2, r3, #6
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ed6:	b004      	add	sp, #16
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	ffbdffbf 	.word	0xffbdffbf

08003ee0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 0201 	bic.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f30:	200a      	movs	r0, #10
 8003f32:	f7fd f8a7 	bl	8001084 <HAL_Delay>
      ms += 10U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	330a      	adds	r3, #10
 8003f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa25 	bl	800438c <USB_GetMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d01e      	beq.n	8003f86 <USB_SetCurrentMode+0x84>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f4c:	d9f0      	bls.n	8003f30 <USB_SetCurrentMode+0x2e>
 8003f4e:	e01a      	b.n	8003f86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d115      	bne.n	8003f82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f62:	200a      	movs	r0, #10
 8003f64:	f7fd f88e 	bl	8001084 <HAL_Delay>
      ms += 10U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	330a      	adds	r3, #10
 8003f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa0c 	bl	800438c <USB_GetMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <USB_SetCurrentMode+0x84>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f7e:	d9f0      	bls.n	8003f62 <USB_SetCurrentMode+0x60>
 8003f80:	e001      	b.n	8003f86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e005      	b.n	8003f92 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2bc8      	cmp	r3, #200	@ 0xc8
 8003f8a:	d101      	bne.n	8003f90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e009      	b.n	8003fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3340      	adds	r3, #64	@ 0x40
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b0e      	cmp	r3, #14
 8003fd4:	d9f2      	bls.n	8003fbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11c      	bne.n	8004018 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e005      	b.n	8004024 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004030:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10d      	bne.n	8004054 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004040:	2100      	movs	r1, #0
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f968 	bl	8004318 <USB_SetDevSpeed>
 8004048:	e008      	b.n	800405c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800404a:	2101      	movs	r1, #1
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f963 	bl	8004318 <USB_SetDevSpeed>
 8004052:	e003      	b.n	800405c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004054:	2103      	movs	r1, #3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f95e 	bl	8004318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800405c:	2110      	movs	r1, #16
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8fa 	bl	8004258 <USB_FlushTxFifo>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f924 	bl	80042bc <USB_FlushRxFifo>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004084:	461a      	mov	r2, r3
 8004086:	2300      	movs	r3, #0
 8004088:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004090:	461a      	mov	r2, r3
 8004092:	2300      	movs	r3, #0
 8004094:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	461a      	mov	r2, r3
 800409e:	2300      	movs	r3, #0
 80040a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	e043      	b.n	8004130 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040be:	d118      	bne.n	80040f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d2:	461a      	mov	r2, r3
 80040d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e013      	b.n	8004104 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e8:	461a      	mov	r2, r3
 80040ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e008      	b.n	8004104 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004110:	461a      	mov	r2, r3
 8004112:	2300      	movs	r3, #0
 8004114:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004122:	461a      	mov	r2, r3
 8004124:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004128:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3301      	adds	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004134:	461a      	mov	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4293      	cmp	r3, r2
 800413a:	d3b5      	bcc.n	80040a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e043      	b.n	80041ca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004158:	d118      	bne.n	800418c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e013      	b.n	800419e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004182:	461a      	mov	r2, r3
 8004184:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e008      	b.n	800419e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	2300      	movs	r3, #0
 800419c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041aa:	461a      	mov	r2, r3
 80041ac:	2300      	movs	r3, #0
 80041ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3301      	adds	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041ce:	461a      	mov	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d3b5      	bcc.n	8004142 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80041f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f043 0210 	orr.w	r2, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	4b0f      	ldr	r3, [pc, #60]	@ (8004250 <USB_DevInit+0x2b4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004218:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f043 0208 	orr.w	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800422c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <USB_DevInit+0x2b8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800424c:	b004      	add	sp, #16
 800424e:	4770      	bx	lr
 8004250:	803c3800 	.word	0x803c3800
 8004254:	40000004 	.word	0x40000004

08004258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004272:	d901      	bls.n	8004278 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e01b      	b.n	80042b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	daf2      	bge.n	8004266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	019b      	lsls	r3, r3, #6
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800429c:	d901      	bls.n	80042a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e006      	b.n	80042b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d0f0      	beq.n	8004290 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042d4:	d901      	bls.n	80042da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e018      	b.n	800430c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	daf2      	bge.n	80042c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2210      	movs	r2, #16
 80042ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042f8:	d901      	bls.n	80042fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e006      	b.n	800430c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b10      	cmp	r3, #16
 8004308:	d0f0      	beq.n	80042ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043c0:	d901      	bls.n	80043c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e022      	b.n	800440c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	daf2      	bge.n	80043b4 <USB_CoreReset+0xc>

  count = 10U;
 80043ce:	230a      	movs	r3, #10
 80043d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80043d2:	e002      	b.n	80043da <USB_CoreReset+0x32>
  {
    count--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f9      	bne.n	80043d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043f8:	d901      	bls.n	80043fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e006      	b.n	800440c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b01      	cmp	r3, #1
 8004408:	d0f0      	beq.n	80043ec <USB_CoreReset+0x44>

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <siprintf>:
 8004418:	b40e      	push	{r1, r2, r3}
 800441a:	b510      	push	{r4, lr}
 800441c:	b09d      	sub	sp, #116	@ 0x74
 800441e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004420:	9002      	str	r0, [sp, #8]
 8004422:	9006      	str	r0, [sp, #24]
 8004424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004428:	480a      	ldr	r0, [pc, #40]	@ (8004454 <siprintf+0x3c>)
 800442a:	9107      	str	r1, [sp, #28]
 800442c:	9104      	str	r1, [sp, #16]
 800442e:	490a      	ldr	r1, [pc, #40]	@ (8004458 <siprintf+0x40>)
 8004430:	f853 2b04 	ldr.w	r2, [r3], #4
 8004434:	9105      	str	r1, [sp, #20]
 8004436:	2400      	movs	r4, #0
 8004438:	a902      	add	r1, sp, #8
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004440:	f000 f994 	bl	800476c <_svfiprintf_r>
 8004444:	9b02      	ldr	r3, [sp, #8]
 8004446:	701c      	strb	r4, [r3, #0]
 8004448:	b01d      	add	sp, #116	@ 0x74
 800444a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444e:	b003      	add	sp, #12
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c
 8004458:	ffff0208 	.word	0xffff0208

0800445c <memset>:
 800445c:	4402      	add	r2, r0
 800445e:	4603      	mov	r3, r0
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	f803 1b01 	strb.w	r1, [r3], #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <__errno>:
 800446c:	4b01      	ldr	r3, [pc, #4]	@ (8004474 <__errno+0x8>)
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	2000000c 	.word	0x2000000c

08004478 <__libc_init_array>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4d0d      	ldr	r5, [pc, #52]	@ (80044b0 <__libc_init_array+0x38>)
 800447c:	4c0d      	ldr	r4, [pc, #52]	@ (80044b4 <__libc_init_array+0x3c>)
 800447e:	1b64      	subs	r4, r4, r5
 8004480:	10a4      	asrs	r4, r4, #2
 8004482:	2600      	movs	r6, #0
 8004484:	42a6      	cmp	r6, r4
 8004486:	d109      	bne.n	800449c <__libc_init_array+0x24>
 8004488:	4d0b      	ldr	r5, [pc, #44]	@ (80044b8 <__libc_init_array+0x40>)
 800448a:	4c0c      	ldr	r4, [pc, #48]	@ (80044bc <__libc_init_array+0x44>)
 800448c:	f000 fc64 	bl	8004d58 <_init>
 8004490:	1b64      	subs	r4, r4, r5
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	2600      	movs	r6, #0
 8004496:	42a6      	cmp	r6, r4
 8004498:	d105      	bne.n	80044a6 <__libc_init_array+0x2e>
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a0:	4798      	blx	r3
 80044a2:	3601      	adds	r6, #1
 80044a4:	e7ee      	b.n	8004484 <__libc_init_array+0xc>
 80044a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044aa:	4798      	blx	r3
 80044ac:	3601      	adds	r6, #1
 80044ae:	e7f2      	b.n	8004496 <__libc_init_array+0x1e>
 80044b0:	08004e0c 	.word	0x08004e0c
 80044b4:	08004e0c 	.word	0x08004e0c
 80044b8:	08004e0c 	.word	0x08004e0c
 80044bc:	08004e10 	.word	0x08004e10

080044c0 <__retarget_lock_acquire_recursive>:
 80044c0:	4770      	bx	lr

080044c2 <__retarget_lock_release_recursive>:
 80044c2:	4770      	bx	lr

080044c4 <_free_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4605      	mov	r5, r0
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d041      	beq.n	8004550 <_free_r+0x8c>
 80044cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d0:	1f0c      	subs	r4, r1, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfb8      	it	lt
 80044d6:	18e4      	addlt	r4, r4, r3
 80044d8:	f000 f8e0 	bl	800469c <__malloc_lock>
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <_free_r+0x90>)
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	b933      	cbnz	r3, 80044f0 <_free_r+0x2c>
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	6014      	str	r4, [r2, #0]
 80044e6:	4628      	mov	r0, r5
 80044e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ec:	f000 b8dc 	b.w	80046a8 <__malloc_unlock>
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d908      	bls.n	8004506 <_free_r+0x42>
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	1821      	adds	r1, r4, r0
 80044f8:	428b      	cmp	r3, r1
 80044fa:	bf01      	itttt	eq
 80044fc:	6819      	ldreq	r1, [r3, #0]
 80044fe:	685b      	ldreq	r3, [r3, #4]
 8004500:	1809      	addeq	r1, r1, r0
 8004502:	6021      	streq	r1, [r4, #0]
 8004504:	e7ed      	b.n	80044e2 <_free_r+0x1e>
 8004506:	461a      	mov	r2, r3
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b10b      	cbz	r3, 8004510 <_free_r+0x4c>
 800450c:	42a3      	cmp	r3, r4
 800450e:	d9fa      	bls.n	8004506 <_free_r+0x42>
 8004510:	6811      	ldr	r1, [r2, #0]
 8004512:	1850      	adds	r0, r2, r1
 8004514:	42a0      	cmp	r0, r4
 8004516:	d10b      	bne.n	8004530 <_free_r+0x6c>
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	4401      	add	r1, r0
 800451c:	1850      	adds	r0, r2, r1
 800451e:	4283      	cmp	r3, r0
 8004520:	6011      	str	r1, [r2, #0]
 8004522:	d1e0      	bne.n	80044e6 <_free_r+0x22>
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	6053      	str	r3, [r2, #4]
 800452a:	4408      	add	r0, r1
 800452c:	6010      	str	r0, [r2, #0]
 800452e:	e7da      	b.n	80044e6 <_free_r+0x22>
 8004530:	d902      	bls.n	8004538 <_free_r+0x74>
 8004532:	230c      	movs	r3, #12
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	e7d6      	b.n	80044e6 <_free_r+0x22>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	1821      	adds	r1, r4, r0
 800453c:	428b      	cmp	r3, r1
 800453e:	bf04      	itt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	bf04      	itt	eq
 8004548:	1809      	addeq	r1, r1, r0
 800454a:	6021      	streq	r1, [r4, #0]
 800454c:	6054      	str	r4, [r2, #4]
 800454e:	e7ca      	b.n	80044e6 <_free_r+0x22>
 8004550:	bd38      	pop	{r3, r4, r5, pc}
 8004552:	bf00      	nop
 8004554:	200009e4 	.word	0x200009e4

08004558 <sbrk_aligned>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4e0f      	ldr	r6, [pc, #60]	@ (8004598 <sbrk_aligned+0x40>)
 800455c:	460c      	mov	r4, r1
 800455e:	6831      	ldr	r1, [r6, #0]
 8004560:	4605      	mov	r5, r0
 8004562:	b911      	cbnz	r1, 800456a <sbrk_aligned+0x12>
 8004564:	f000 fba4 	bl	8004cb0 <_sbrk_r>
 8004568:	6030      	str	r0, [r6, #0]
 800456a:	4621      	mov	r1, r4
 800456c:	4628      	mov	r0, r5
 800456e:	f000 fb9f 	bl	8004cb0 <_sbrk_r>
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	d103      	bne.n	800457e <sbrk_aligned+0x26>
 8004576:	f04f 34ff 	mov.w	r4, #4294967295
 800457a:	4620      	mov	r0, r4
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	1cc4      	adds	r4, r0, #3
 8004580:	f024 0403 	bic.w	r4, r4, #3
 8004584:	42a0      	cmp	r0, r4
 8004586:	d0f8      	beq.n	800457a <sbrk_aligned+0x22>
 8004588:	1a21      	subs	r1, r4, r0
 800458a:	4628      	mov	r0, r5
 800458c:	f000 fb90 	bl	8004cb0 <_sbrk_r>
 8004590:	3001      	adds	r0, #1
 8004592:	d1f2      	bne.n	800457a <sbrk_aligned+0x22>
 8004594:	e7ef      	b.n	8004576 <sbrk_aligned+0x1e>
 8004596:	bf00      	nop
 8004598:	200009e0 	.word	0x200009e0

0800459c <_malloc_r>:
 800459c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a0:	1ccd      	adds	r5, r1, #3
 80045a2:	f025 0503 	bic.w	r5, r5, #3
 80045a6:	3508      	adds	r5, #8
 80045a8:	2d0c      	cmp	r5, #12
 80045aa:	bf38      	it	cc
 80045ac:	250c      	movcc	r5, #12
 80045ae:	2d00      	cmp	r5, #0
 80045b0:	4606      	mov	r6, r0
 80045b2:	db01      	blt.n	80045b8 <_malloc_r+0x1c>
 80045b4:	42a9      	cmp	r1, r5
 80045b6:	d904      	bls.n	80045c2 <_malloc_r+0x26>
 80045b8:	230c      	movs	r3, #12
 80045ba:	6033      	str	r3, [r6, #0]
 80045bc:	2000      	movs	r0, #0
 80045be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004698 <_malloc_r+0xfc>
 80045c6:	f000 f869 	bl	800469c <__malloc_lock>
 80045ca:	f8d8 3000 	ldr.w	r3, [r8]
 80045ce:	461c      	mov	r4, r3
 80045d0:	bb44      	cbnz	r4, 8004624 <_malloc_r+0x88>
 80045d2:	4629      	mov	r1, r5
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff ffbf 	bl	8004558 <sbrk_aligned>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	4604      	mov	r4, r0
 80045de:	d158      	bne.n	8004692 <_malloc_r+0xf6>
 80045e0:	f8d8 4000 	ldr.w	r4, [r8]
 80045e4:	4627      	mov	r7, r4
 80045e6:	2f00      	cmp	r7, #0
 80045e8:	d143      	bne.n	8004672 <_malloc_r+0xd6>
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d04b      	beq.n	8004686 <_malloc_r+0xea>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	4639      	mov	r1, r7
 80045f2:	4630      	mov	r0, r6
 80045f4:	eb04 0903 	add.w	r9, r4, r3
 80045f8:	f000 fb5a 	bl	8004cb0 <_sbrk_r>
 80045fc:	4581      	cmp	r9, r0
 80045fe:	d142      	bne.n	8004686 <_malloc_r+0xea>
 8004600:	6821      	ldr	r1, [r4, #0]
 8004602:	1a6d      	subs	r5, r5, r1
 8004604:	4629      	mov	r1, r5
 8004606:	4630      	mov	r0, r6
 8004608:	f7ff ffa6 	bl	8004558 <sbrk_aligned>
 800460c:	3001      	adds	r0, #1
 800460e:	d03a      	beq.n	8004686 <_malloc_r+0xea>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	442b      	add	r3, r5
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	f8d8 3000 	ldr.w	r3, [r8]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	bb62      	cbnz	r2, 8004678 <_malloc_r+0xdc>
 800461e:	f8c8 7000 	str.w	r7, [r8]
 8004622:	e00f      	b.n	8004644 <_malloc_r+0xa8>
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	1b52      	subs	r2, r2, r5
 8004628:	d420      	bmi.n	800466c <_malloc_r+0xd0>
 800462a:	2a0b      	cmp	r2, #11
 800462c:	d917      	bls.n	800465e <_malloc_r+0xc2>
 800462e:	1961      	adds	r1, r4, r5
 8004630:	42a3      	cmp	r3, r4
 8004632:	6025      	str	r5, [r4, #0]
 8004634:	bf18      	it	ne
 8004636:	6059      	strne	r1, [r3, #4]
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	bf08      	it	eq
 800463c:	f8c8 1000 	streq.w	r1, [r8]
 8004640:	5162      	str	r2, [r4, r5]
 8004642:	604b      	str	r3, [r1, #4]
 8004644:	4630      	mov	r0, r6
 8004646:	f000 f82f 	bl	80046a8 <__malloc_unlock>
 800464a:	f104 000b 	add.w	r0, r4, #11
 800464e:	1d23      	adds	r3, r4, #4
 8004650:	f020 0007 	bic.w	r0, r0, #7
 8004654:	1ac2      	subs	r2, r0, r3
 8004656:	bf1c      	itt	ne
 8004658:	1a1b      	subne	r3, r3, r0
 800465a:	50a3      	strne	r3, [r4, r2]
 800465c:	e7af      	b.n	80045be <_malloc_r+0x22>
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	bf0c      	ite	eq
 8004664:	f8c8 2000 	streq.w	r2, [r8]
 8004668:	605a      	strne	r2, [r3, #4]
 800466a:	e7eb      	b.n	8004644 <_malloc_r+0xa8>
 800466c:	4623      	mov	r3, r4
 800466e:	6864      	ldr	r4, [r4, #4]
 8004670:	e7ae      	b.n	80045d0 <_malloc_r+0x34>
 8004672:	463c      	mov	r4, r7
 8004674:	687f      	ldr	r7, [r7, #4]
 8004676:	e7b6      	b.n	80045e6 <_malloc_r+0x4a>
 8004678:	461a      	mov	r2, r3
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	42a3      	cmp	r3, r4
 800467e:	d1fb      	bne.n	8004678 <_malloc_r+0xdc>
 8004680:	2300      	movs	r3, #0
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	e7de      	b.n	8004644 <_malloc_r+0xa8>
 8004686:	230c      	movs	r3, #12
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	4630      	mov	r0, r6
 800468c:	f000 f80c 	bl	80046a8 <__malloc_unlock>
 8004690:	e794      	b.n	80045bc <_malloc_r+0x20>
 8004692:	6005      	str	r5, [r0, #0]
 8004694:	e7d6      	b.n	8004644 <_malloc_r+0xa8>
 8004696:	bf00      	nop
 8004698:	200009e4 	.word	0x200009e4

0800469c <__malloc_lock>:
 800469c:	4801      	ldr	r0, [pc, #4]	@ (80046a4 <__malloc_lock+0x8>)
 800469e:	f7ff bf0f 	b.w	80044c0 <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	200009dc 	.word	0x200009dc

080046a8 <__malloc_unlock>:
 80046a8:	4801      	ldr	r0, [pc, #4]	@ (80046b0 <__malloc_unlock+0x8>)
 80046aa:	f7ff bf0a 	b.w	80044c2 <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	200009dc 	.word	0x200009dc

080046b4 <__ssputs_r>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	688e      	ldr	r6, [r1, #8]
 80046ba:	461f      	mov	r7, r3
 80046bc:	42be      	cmp	r6, r7
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	4682      	mov	sl, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4690      	mov	r8, r2
 80046c6:	d82d      	bhi.n	8004724 <__ssputs_r+0x70>
 80046c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046d0:	d026      	beq.n	8004720 <__ssputs_r+0x6c>
 80046d2:	6965      	ldr	r5, [r4, #20]
 80046d4:	6909      	ldr	r1, [r1, #16]
 80046d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046da:	eba3 0901 	sub.w	r9, r3, r1
 80046de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e2:	1c7b      	adds	r3, r7, #1
 80046e4:	444b      	add	r3, r9
 80046e6:	106d      	asrs	r5, r5, #1
 80046e8:	429d      	cmp	r5, r3
 80046ea:	bf38      	it	cc
 80046ec:	461d      	movcc	r5, r3
 80046ee:	0553      	lsls	r3, r2, #21
 80046f0:	d527      	bpl.n	8004742 <__ssputs_r+0x8e>
 80046f2:	4629      	mov	r1, r5
 80046f4:	f7ff ff52 	bl	800459c <_malloc_r>
 80046f8:	4606      	mov	r6, r0
 80046fa:	b360      	cbz	r0, 8004756 <__ssputs_r+0xa2>
 80046fc:	6921      	ldr	r1, [r4, #16]
 80046fe:	464a      	mov	r2, r9
 8004700:	f000 fae6 	bl	8004cd0 <memcpy>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	6126      	str	r6, [r4, #16]
 8004712:	6165      	str	r5, [r4, #20]
 8004714:	444e      	add	r6, r9
 8004716:	eba5 0509 	sub.w	r5, r5, r9
 800471a:	6026      	str	r6, [r4, #0]
 800471c:	60a5      	str	r5, [r4, #8]
 800471e:	463e      	mov	r6, r7
 8004720:	42be      	cmp	r6, r7
 8004722:	d900      	bls.n	8004726 <__ssputs_r+0x72>
 8004724:	463e      	mov	r6, r7
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	4632      	mov	r2, r6
 800472a:	4641      	mov	r1, r8
 800472c:	f000 faa6 	bl	8004c7c <memmove>
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	1b9b      	subs	r3, r3, r6
 8004734:	60a3      	str	r3, [r4, #8]
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	4433      	add	r3, r6
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	2000      	movs	r0, #0
 800473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004742:	462a      	mov	r2, r5
 8004744:	f000 fad2 	bl	8004cec <_realloc_r>
 8004748:	4606      	mov	r6, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d1e0      	bne.n	8004710 <__ssputs_r+0x5c>
 800474e:	6921      	ldr	r1, [r4, #16]
 8004750:	4650      	mov	r0, sl
 8004752:	f7ff feb7 	bl	80044c4 <_free_r>
 8004756:	230c      	movs	r3, #12
 8004758:	f8ca 3000 	str.w	r3, [sl]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	e7e9      	b.n	800473e <__ssputs_r+0x8a>
	...

0800476c <_svfiprintf_r>:
 800476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004770:	4698      	mov	r8, r3
 8004772:	898b      	ldrh	r3, [r1, #12]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	b09d      	sub	sp, #116	@ 0x74
 8004778:	4607      	mov	r7, r0
 800477a:	460d      	mov	r5, r1
 800477c:	4614      	mov	r4, r2
 800477e:	d510      	bpl.n	80047a2 <_svfiprintf_r+0x36>
 8004780:	690b      	ldr	r3, [r1, #16]
 8004782:	b973      	cbnz	r3, 80047a2 <_svfiprintf_r+0x36>
 8004784:	2140      	movs	r1, #64	@ 0x40
 8004786:	f7ff ff09 	bl	800459c <_malloc_r>
 800478a:	6028      	str	r0, [r5, #0]
 800478c:	6128      	str	r0, [r5, #16]
 800478e:	b930      	cbnz	r0, 800479e <_svfiprintf_r+0x32>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	b01d      	add	sp, #116	@ 0x74
 800479a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479e:	2340      	movs	r3, #64	@ 0x40
 80047a0:	616b      	str	r3, [r5, #20]
 80047a2:	2300      	movs	r3, #0
 80047a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a6:	2320      	movs	r3, #32
 80047a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80047b0:	2330      	movs	r3, #48	@ 0x30
 80047b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004950 <_svfiprintf_r+0x1e4>
 80047b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047ba:	f04f 0901 	mov.w	r9, #1
 80047be:	4623      	mov	r3, r4
 80047c0:	469a      	mov	sl, r3
 80047c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c6:	b10a      	cbz	r2, 80047cc <_svfiprintf_r+0x60>
 80047c8:	2a25      	cmp	r2, #37	@ 0x25
 80047ca:	d1f9      	bne.n	80047c0 <_svfiprintf_r+0x54>
 80047cc:	ebba 0b04 	subs.w	fp, sl, r4
 80047d0:	d00b      	beq.n	80047ea <_svfiprintf_r+0x7e>
 80047d2:	465b      	mov	r3, fp
 80047d4:	4622      	mov	r2, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	4638      	mov	r0, r7
 80047da:	f7ff ff6b 	bl	80046b4 <__ssputs_r>
 80047de:	3001      	adds	r0, #1
 80047e0:	f000 80a7 	beq.w	8004932 <_svfiprintf_r+0x1c6>
 80047e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047e6:	445a      	add	r2, fp
 80047e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ea:	f89a 3000 	ldrb.w	r3, [sl]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 809f 	beq.w	8004932 <_svfiprintf_r+0x1c6>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295
 80047fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fe:	f10a 0a01 	add.w	sl, sl, #1
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	9307      	str	r3, [sp, #28]
 8004806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800480a:	931a      	str	r3, [sp, #104]	@ 0x68
 800480c:	4654      	mov	r4, sl
 800480e:	2205      	movs	r2, #5
 8004810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004814:	484e      	ldr	r0, [pc, #312]	@ (8004950 <_svfiprintf_r+0x1e4>)
 8004816:	f7fb fd13 	bl	8000240 <memchr>
 800481a:	9a04      	ldr	r2, [sp, #16]
 800481c:	b9d8      	cbnz	r0, 8004856 <_svfiprintf_r+0xea>
 800481e:	06d0      	lsls	r0, r2, #27
 8004820:	bf44      	itt	mi
 8004822:	2320      	movmi	r3, #32
 8004824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004828:	0711      	lsls	r1, r2, #28
 800482a:	bf44      	itt	mi
 800482c:	232b      	movmi	r3, #43	@ 0x2b
 800482e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004832:	f89a 3000 	ldrb.w	r3, [sl]
 8004836:	2b2a      	cmp	r3, #42	@ 0x2a
 8004838:	d015      	beq.n	8004866 <_svfiprintf_r+0xfa>
 800483a:	9a07      	ldr	r2, [sp, #28]
 800483c:	4654      	mov	r4, sl
 800483e:	2000      	movs	r0, #0
 8004840:	f04f 0c0a 	mov.w	ip, #10
 8004844:	4621      	mov	r1, r4
 8004846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800484a:	3b30      	subs	r3, #48	@ 0x30
 800484c:	2b09      	cmp	r3, #9
 800484e:	d94b      	bls.n	80048e8 <_svfiprintf_r+0x17c>
 8004850:	b1b0      	cbz	r0, 8004880 <_svfiprintf_r+0x114>
 8004852:	9207      	str	r2, [sp, #28]
 8004854:	e014      	b.n	8004880 <_svfiprintf_r+0x114>
 8004856:	eba0 0308 	sub.w	r3, r0, r8
 800485a:	fa09 f303 	lsl.w	r3, r9, r3
 800485e:	4313      	orrs	r3, r2
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	46a2      	mov	sl, r4
 8004864:	e7d2      	b.n	800480c <_svfiprintf_r+0xa0>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	1d19      	adds	r1, r3, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	9103      	str	r1, [sp, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfbb      	ittet	lt
 8004872:	425b      	neglt	r3, r3
 8004874:	f042 0202 	orrlt.w	r2, r2, #2
 8004878:	9307      	strge	r3, [sp, #28]
 800487a:	9307      	strlt	r3, [sp, #28]
 800487c:	bfb8      	it	lt
 800487e:	9204      	strlt	r2, [sp, #16]
 8004880:	7823      	ldrb	r3, [r4, #0]
 8004882:	2b2e      	cmp	r3, #46	@ 0x2e
 8004884:	d10a      	bne.n	800489c <_svfiprintf_r+0x130>
 8004886:	7863      	ldrb	r3, [r4, #1]
 8004888:	2b2a      	cmp	r3, #42	@ 0x2a
 800488a:	d132      	bne.n	80048f2 <_svfiprintf_r+0x186>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004898:	3402      	adds	r4, #2
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004960 <_svfiprintf_r+0x1f4>
 80048a0:	7821      	ldrb	r1, [r4, #0]
 80048a2:	2203      	movs	r2, #3
 80048a4:	4650      	mov	r0, sl
 80048a6:	f7fb fccb 	bl	8000240 <memchr>
 80048aa:	b138      	cbz	r0, 80048bc <_svfiprintf_r+0x150>
 80048ac:	9b04      	ldr	r3, [sp, #16]
 80048ae:	eba0 000a 	sub.w	r0, r0, sl
 80048b2:	2240      	movs	r2, #64	@ 0x40
 80048b4:	4082      	lsls	r2, r0
 80048b6:	4313      	orrs	r3, r2
 80048b8:	3401      	adds	r4, #1
 80048ba:	9304      	str	r3, [sp, #16]
 80048bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c0:	4824      	ldr	r0, [pc, #144]	@ (8004954 <_svfiprintf_r+0x1e8>)
 80048c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048c6:	2206      	movs	r2, #6
 80048c8:	f7fb fcba 	bl	8000240 <memchr>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d036      	beq.n	800493e <_svfiprintf_r+0x1d2>
 80048d0:	4b21      	ldr	r3, [pc, #132]	@ (8004958 <_svfiprintf_r+0x1ec>)
 80048d2:	bb1b      	cbnz	r3, 800491c <_svfiprintf_r+0x1b0>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	3307      	adds	r3, #7
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	3308      	adds	r3, #8
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e2:	4433      	add	r3, r6
 80048e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048e6:	e76a      	b.n	80047be <_svfiprintf_r+0x52>
 80048e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ec:	460c      	mov	r4, r1
 80048ee:	2001      	movs	r0, #1
 80048f0:	e7a8      	b.n	8004844 <_svfiprintf_r+0xd8>
 80048f2:	2300      	movs	r3, #0
 80048f4:	3401      	adds	r4, #1
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 0c0a 	mov.w	ip, #10
 80048fe:	4620      	mov	r0, r4
 8004900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004904:	3a30      	subs	r2, #48	@ 0x30
 8004906:	2a09      	cmp	r2, #9
 8004908:	d903      	bls.n	8004912 <_svfiprintf_r+0x1a6>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0c6      	beq.n	800489c <_svfiprintf_r+0x130>
 800490e:	9105      	str	r1, [sp, #20]
 8004910:	e7c4      	b.n	800489c <_svfiprintf_r+0x130>
 8004912:	fb0c 2101 	mla	r1, ip, r1, r2
 8004916:	4604      	mov	r4, r0
 8004918:	2301      	movs	r3, #1
 800491a:	e7f0      	b.n	80048fe <_svfiprintf_r+0x192>
 800491c:	ab03      	add	r3, sp, #12
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	462a      	mov	r2, r5
 8004922:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <_svfiprintf_r+0x1f0>)
 8004924:	a904      	add	r1, sp, #16
 8004926:	4638      	mov	r0, r7
 8004928:	f3af 8000 	nop.w
 800492c:	1c42      	adds	r2, r0, #1
 800492e:	4606      	mov	r6, r0
 8004930:	d1d6      	bne.n	80048e0 <_svfiprintf_r+0x174>
 8004932:	89ab      	ldrh	r3, [r5, #12]
 8004934:	065b      	lsls	r3, r3, #25
 8004936:	f53f af2d 	bmi.w	8004794 <_svfiprintf_r+0x28>
 800493a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800493c:	e72c      	b.n	8004798 <_svfiprintf_r+0x2c>
 800493e:	ab03      	add	r3, sp, #12
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	462a      	mov	r2, r5
 8004944:	4b05      	ldr	r3, [pc, #20]	@ (800495c <_svfiprintf_r+0x1f0>)
 8004946:	a904      	add	r1, sp, #16
 8004948:	4638      	mov	r0, r7
 800494a:	f000 f879 	bl	8004a40 <_printf_i>
 800494e:	e7ed      	b.n	800492c <_svfiprintf_r+0x1c0>
 8004950:	08004dd0 	.word	0x08004dd0
 8004954:	08004dda 	.word	0x08004dda
 8004958:	00000000 	.word	0x00000000
 800495c:	080046b5 	.word	0x080046b5
 8004960:	08004dd6 	.word	0x08004dd6

08004964 <_printf_common>:
 8004964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	4616      	mov	r6, r2
 800496a:	4698      	mov	r8, r3
 800496c:	688a      	ldr	r2, [r1, #8]
 800496e:	690b      	ldr	r3, [r1, #16]
 8004970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004974:	4293      	cmp	r3, r2
 8004976:	bfb8      	it	lt
 8004978:	4613      	movlt	r3, r2
 800497a:	6033      	str	r3, [r6, #0]
 800497c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004980:	4607      	mov	r7, r0
 8004982:	460c      	mov	r4, r1
 8004984:	b10a      	cbz	r2, 800498a <_printf_common+0x26>
 8004986:	3301      	adds	r3, #1
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	0699      	lsls	r1, r3, #26
 800498e:	bf42      	ittt	mi
 8004990:	6833      	ldrmi	r3, [r6, #0]
 8004992:	3302      	addmi	r3, #2
 8004994:	6033      	strmi	r3, [r6, #0]
 8004996:	6825      	ldr	r5, [r4, #0]
 8004998:	f015 0506 	ands.w	r5, r5, #6
 800499c:	d106      	bne.n	80049ac <_printf_common+0x48>
 800499e:	f104 0a19 	add.w	sl, r4, #25
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	6832      	ldr	r2, [r6, #0]
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	dc26      	bgt.n	80049fa <_printf_common+0x96>
 80049ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	3b00      	subs	r3, #0
 80049b4:	bf18      	it	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	0692      	lsls	r2, r2, #26
 80049ba:	d42b      	bmi.n	8004a14 <_printf_common+0xb0>
 80049bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049c0:	4641      	mov	r1, r8
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c8      	blx	r9
 80049c6:	3001      	adds	r0, #1
 80049c8:	d01e      	beq.n	8004a08 <_printf_common+0xa4>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	f003 0306 	and.w	r3, r3, #6
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	bf02      	ittt	eq
 80049d6:	68e5      	ldreq	r5, [r4, #12]
 80049d8:	6833      	ldreq	r3, [r6, #0]
 80049da:	1aed      	subeq	r5, r5, r3
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	bf0c      	ite	eq
 80049e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e4:	2500      	movne	r5, #0
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bfc4      	itt	gt
 80049ea:	1a9b      	subgt	r3, r3, r2
 80049ec:	18ed      	addgt	r5, r5, r3
 80049ee:	2600      	movs	r6, #0
 80049f0:	341a      	adds	r4, #26
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d11a      	bne.n	8004a2c <_printf_common+0xc8>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e008      	b.n	8004a0c <_printf_common+0xa8>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4641      	mov	r1, r8
 8004a00:	4638      	mov	r0, r7
 8004a02:	47c8      	blx	r9
 8004a04:	3001      	adds	r0, #1
 8004a06:	d103      	bne.n	8004a10 <_printf_common+0xac>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7c6      	b.n	80049a2 <_printf_common+0x3e>
 8004a14:	18e1      	adds	r1, r4, r3
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	2030      	movs	r0, #48	@ 0x30
 8004a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a1e:	4422      	add	r2, r4
 8004a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a28:	3302      	adds	r3, #2
 8004a2a:	e7c7      	b.n	80049bc <_printf_common+0x58>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4622      	mov	r2, r4
 8004a30:	4641      	mov	r1, r8
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c8      	blx	r9
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0e6      	beq.n	8004a08 <_printf_common+0xa4>
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7d9      	b.n	80049f2 <_printf_common+0x8e>
	...

08004a40 <_printf_i>:
 8004a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	7e0f      	ldrb	r7, [r1, #24]
 8004a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a48:	2f78      	cmp	r7, #120	@ 0x78
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	469a      	mov	sl, r3
 8004a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a56:	d807      	bhi.n	8004a68 <_printf_i+0x28>
 8004a58:	2f62      	cmp	r7, #98	@ 0x62
 8004a5a:	d80a      	bhi.n	8004a72 <_printf_i+0x32>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	f000 80d1 	beq.w	8004c04 <_printf_i+0x1c4>
 8004a62:	2f58      	cmp	r7, #88	@ 0x58
 8004a64:	f000 80b8 	beq.w	8004bd8 <_printf_i+0x198>
 8004a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a70:	e03a      	b.n	8004ae8 <_printf_i+0xa8>
 8004a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a76:	2b15      	cmp	r3, #21
 8004a78:	d8f6      	bhi.n	8004a68 <_printf_i+0x28>
 8004a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a80 <_printf_i+0x40>)
 8004a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004a69 	.word	0x08004a69
 8004a8c:	08004a69 	.word	0x08004a69
 8004a90:	08004a69 	.word	0x08004a69
 8004a94:	08004a69 	.word	0x08004a69
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004a69 	.word	0x08004a69
 8004aa0:	08004a69 	.word	0x08004a69
 8004aa4:	08004a69 	.word	0x08004a69
 8004aa8:	08004a69 	.word	0x08004a69
 8004aac:	08004beb 	.word	0x08004beb
 8004ab0:	08004b17 	.word	0x08004b17
 8004ab4:	08004ba5 	.word	0x08004ba5
 8004ab8:	08004a69 	.word	0x08004a69
 8004abc:	08004a69 	.word	0x08004a69
 8004ac0:	08004c0d 	.word	0x08004c0d
 8004ac4:	08004a69 	.word	0x08004a69
 8004ac8:	08004b17 	.word	0x08004b17
 8004acc:	08004a69 	.word	0x08004a69
 8004ad0:	08004a69 	.word	0x08004a69
 8004ad4:	08004bad 	.word	0x08004bad
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6032      	str	r2, [r6, #0]
 8004ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e09c      	b.n	8004c26 <_printf_i+0x1e6>
 8004aec:	6833      	ldr	r3, [r6, #0]
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	1d19      	adds	r1, r3, #4
 8004af2:	6031      	str	r1, [r6, #0]
 8004af4:	0606      	lsls	r6, r0, #24
 8004af6:	d501      	bpl.n	8004afc <_printf_i+0xbc>
 8004af8:	681d      	ldr	r5, [r3, #0]
 8004afa:	e003      	b.n	8004b04 <_printf_i+0xc4>
 8004afc:	0645      	lsls	r5, r0, #25
 8004afe:	d5fb      	bpl.n	8004af8 <_printf_i+0xb8>
 8004b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	da03      	bge.n	8004b10 <_printf_i+0xd0>
 8004b08:	232d      	movs	r3, #45	@ 0x2d
 8004b0a:	426d      	negs	r5, r5
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b10:	4858      	ldr	r0, [pc, #352]	@ (8004c74 <_printf_i+0x234>)
 8004b12:	230a      	movs	r3, #10
 8004b14:	e011      	b.n	8004b3a <_printf_i+0xfa>
 8004b16:	6821      	ldr	r1, [r4, #0]
 8004b18:	6833      	ldr	r3, [r6, #0]
 8004b1a:	0608      	lsls	r0, r1, #24
 8004b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b20:	d402      	bmi.n	8004b28 <_printf_i+0xe8>
 8004b22:	0649      	lsls	r1, r1, #25
 8004b24:	bf48      	it	mi
 8004b26:	b2ad      	uxthmi	r5, r5
 8004b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b2a:	4852      	ldr	r0, [pc, #328]	@ (8004c74 <_printf_i+0x234>)
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	bf14      	ite	ne
 8004b30:	230a      	movne	r3, #10
 8004b32:	2308      	moveq	r3, #8
 8004b34:	2100      	movs	r1, #0
 8004b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b3a:	6866      	ldr	r6, [r4, #4]
 8004b3c:	60a6      	str	r6, [r4, #8]
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	db05      	blt.n	8004b4e <_printf_i+0x10e>
 8004b42:	6821      	ldr	r1, [r4, #0]
 8004b44:	432e      	orrs	r6, r5
 8004b46:	f021 0104 	bic.w	r1, r1, #4
 8004b4a:	6021      	str	r1, [r4, #0]
 8004b4c:	d04b      	beq.n	8004be6 <_printf_i+0x1a6>
 8004b4e:	4616      	mov	r6, r2
 8004b50:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b54:	fb03 5711 	mls	r7, r3, r1, r5
 8004b58:	5dc7      	ldrb	r7, [r0, r7]
 8004b5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b5e:	462f      	mov	r7, r5
 8004b60:	42bb      	cmp	r3, r7
 8004b62:	460d      	mov	r5, r1
 8004b64:	d9f4      	bls.n	8004b50 <_printf_i+0x110>
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d10b      	bne.n	8004b82 <_printf_i+0x142>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	07df      	lsls	r7, r3, #31
 8004b6e:	d508      	bpl.n	8004b82 <_printf_i+0x142>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	6861      	ldr	r1, [r4, #4]
 8004b74:	4299      	cmp	r1, r3
 8004b76:	bfde      	ittt	le
 8004b78:	2330      	movle	r3, #48	@ 0x30
 8004b7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b82:	1b92      	subs	r2, r2, r6
 8004b84:	6122      	str	r2, [r4, #16]
 8004b86:	f8cd a000 	str.w	sl, [sp]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	aa03      	add	r2, sp, #12
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4640      	mov	r0, r8
 8004b92:	f7ff fee7 	bl	8004964 <_printf_common>
 8004b96:	3001      	adds	r0, #1
 8004b98:	d14a      	bne.n	8004c30 <_printf_i+0x1f0>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	b004      	add	sp, #16
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	f043 0320 	orr.w	r3, r3, #32
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	4832      	ldr	r0, [pc, #200]	@ (8004c78 <_printf_i+0x238>)
 8004bae:	2778      	movs	r7, #120	@ 0x78
 8004bb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	6831      	ldr	r1, [r6, #0]
 8004bb8:	061f      	lsls	r7, r3, #24
 8004bba:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bbe:	d402      	bmi.n	8004bc6 <_printf_i+0x186>
 8004bc0:	065f      	lsls	r7, r3, #25
 8004bc2:	bf48      	it	mi
 8004bc4:	b2ad      	uxthmi	r5, r5
 8004bc6:	6031      	str	r1, [r6, #0]
 8004bc8:	07d9      	lsls	r1, r3, #31
 8004bca:	bf44      	itt	mi
 8004bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd0:	6023      	strmi	r3, [r4, #0]
 8004bd2:	b11d      	cbz	r5, 8004bdc <_printf_i+0x19c>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	e7ad      	b.n	8004b34 <_printf_i+0xf4>
 8004bd8:	4826      	ldr	r0, [pc, #152]	@ (8004c74 <_printf_i+0x234>)
 8004bda:	e7e9      	b.n	8004bb0 <_printf_i+0x170>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	e7f6      	b.n	8004bd4 <_printf_i+0x194>
 8004be6:	4616      	mov	r6, r2
 8004be8:	e7bd      	b.n	8004b66 <_printf_i+0x126>
 8004bea:	6833      	ldr	r3, [r6, #0]
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	6961      	ldr	r1, [r4, #20]
 8004bf0:	1d18      	adds	r0, r3, #4
 8004bf2:	6030      	str	r0, [r6, #0]
 8004bf4:	062e      	lsls	r6, r5, #24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	d501      	bpl.n	8004bfe <_printf_i+0x1be>
 8004bfa:	6019      	str	r1, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <_printf_i+0x1c4>
 8004bfe:	0668      	lsls	r0, r5, #25
 8004c00:	d5fb      	bpl.n	8004bfa <_printf_i+0x1ba>
 8004c02:	8019      	strh	r1, [r3, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	4616      	mov	r6, r2
 8004c0a:	e7bc      	b.n	8004b86 <_printf_i+0x146>
 8004c0c:	6833      	ldr	r3, [r6, #0]
 8004c0e:	1d1a      	adds	r2, r3, #4
 8004c10:	6032      	str	r2, [r6, #0]
 8004c12:	681e      	ldr	r6, [r3, #0]
 8004c14:	6862      	ldr	r2, [r4, #4]
 8004c16:	2100      	movs	r1, #0
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f7fb fb11 	bl	8000240 <memchr>
 8004c1e:	b108      	cbz	r0, 8004c24 <_printf_i+0x1e4>
 8004c20:	1b80      	subs	r0, r0, r6
 8004c22:	6060      	str	r0, [r4, #4]
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c2e:	e7aa      	b.n	8004b86 <_printf_i+0x146>
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	4632      	mov	r2, r6
 8004c34:	4649      	mov	r1, r9
 8004c36:	4640      	mov	r0, r8
 8004c38:	47d0      	blx	sl
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d0ad      	beq.n	8004b9a <_printf_i+0x15a>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	d413      	bmi.n	8004c6c <_printf_i+0x22c>
 8004c44:	68e0      	ldr	r0, [r4, #12]
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	4298      	cmp	r0, r3
 8004c4a:	bfb8      	it	lt
 8004c4c:	4618      	movlt	r0, r3
 8004c4e:	e7a6      	b.n	8004b9e <_printf_i+0x15e>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4632      	mov	r2, r6
 8004c54:	4649      	mov	r1, r9
 8004c56:	4640      	mov	r0, r8
 8004c58:	47d0      	blx	sl
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d09d      	beq.n	8004b9a <_printf_i+0x15a>
 8004c5e:	3501      	adds	r5, #1
 8004c60:	68e3      	ldr	r3, [r4, #12]
 8004c62:	9903      	ldr	r1, [sp, #12]
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	42ab      	cmp	r3, r5
 8004c68:	dcf2      	bgt.n	8004c50 <_printf_i+0x210>
 8004c6a:	e7eb      	b.n	8004c44 <_printf_i+0x204>
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	f104 0619 	add.w	r6, r4, #25
 8004c72:	e7f5      	b.n	8004c60 <_printf_i+0x220>
 8004c74:	08004de1 	.word	0x08004de1
 8004c78:	08004df2 	.word	0x08004df2

08004c7c <memmove>:
 8004c7c:	4288      	cmp	r0, r1
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	eb01 0402 	add.w	r4, r1, r2
 8004c84:	d902      	bls.n	8004c8c <memmove+0x10>
 8004c86:	4284      	cmp	r4, r0
 8004c88:	4623      	mov	r3, r4
 8004c8a:	d807      	bhi.n	8004c9c <memmove+0x20>
 8004c8c:	1e43      	subs	r3, r0, #1
 8004c8e:	42a1      	cmp	r1, r4
 8004c90:	d008      	beq.n	8004ca4 <memmove+0x28>
 8004c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c9a:	e7f8      	b.n	8004c8e <memmove+0x12>
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4601      	mov	r1, r0
 8004ca0:	428a      	cmp	r2, r1
 8004ca2:	d100      	bne.n	8004ca6 <memmove+0x2a>
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cae:	e7f7      	b.n	8004ca0 <memmove+0x24>

08004cb0 <_sbrk_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4d06      	ldr	r5, [pc, #24]	@ (8004ccc <_sbrk_r+0x1c>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fc f914 	bl	8000ee8 <_sbrk>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_sbrk_r+0x1a>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_sbrk_r+0x1a>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	200009d8 	.word	0x200009d8

08004cd0 <memcpy>:
 8004cd0:	440a      	add	r2, r1
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd8:	d100      	bne.n	8004cdc <memcpy+0xc>
 8004cda:	4770      	bx	lr
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	d1f9      	bne.n	8004cde <memcpy+0xe>
 8004cea:	bd10      	pop	{r4, pc}

08004cec <_realloc_r>:
 8004cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	4614      	mov	r4, r2
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	b921      	cbnz	r1, 8004d02 <_realloc_r+0x16>
 8004cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	f7ff bc4d 	b.w	800459c <_malloc_r>
 8004d02:	b92a      	cbnz	r2, 8004d10 <_realloc_r+0x24>
 8004d04:	f7ff fbde 	bl	80044c4 <_free_r>
 8004d08:	4625      	mov	r5, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d10:	f000 f81a 	bl	8004d48 <_malloc_usable_size_r>
 8004d14:	4284      	cmp	r4, r0
 8004d16:	4606      	mov	r6, r0
 8004d18:	d802      	bhi.n	8004d20 <_realloc_r+0x34>
 8004d1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d1e:	d8f4      	bhi.n	8004d0a <_realloc_r+0x1e>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4638      	mov	r0, r7
 8004d24:	f7ff fc3a 	bl	800459c <_malloc_r>
 8004d28:	4680      	mov	r8, r0
 8004d2a:	b908      	cbnz	r0, 8004d30 <_realloc_r+0x44>
 8004d2c:	4645      	mov	r5, r8
 8004d2e:	e7ec      	b.n	8004d0a <_realloc_r+0x1e>
 8004d30:	42b4      	cmp	r4, r6
 8004d32:	4622      	mov	r2, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	bf28      	it	cs
 8004d38:	4632      	movcs	r2, r6
 8004d3a:	f7ff ffc9 	bl	8004cd0 <memcpy>
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4638      	mov	r0, r7
 8004d42:	f7ff fbbf 	bl	80044c4 <_free_r>
 8004d46:	e7f1      	b.n	8004d2c <_realloc_r+0x40>

08004d48 <_malloc_usable_size_r>:
 8004d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4c:	1f18      	subs	r0, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bfbc      	itt	lt
 8004d52:	580b      	ldrlt	r3, [r1, r0]
 8004d54:	18c0      	addlt	r0, r0, r3
 8004d56:	4770      	bx	lr

08004d58 <_init>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr

08004d64 <_fini>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr
